/* 
Create schema tables
*/

/* 
==============================
 SPECIES
==============================
The species table defines all the available species covered by the birdbanding
service. This is effectively a look-up table for birds.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS species CASCADE;

CREATE TABLE IF NOT EXISTS species (
/* -------------------------------------------------------- */
    /* Integer PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    species_code_nznbbs         integer NOT NULL CHECK (species_code_nznbbs > 0),
    scientific_name_nznbbs      text NOT NULL CHECK (scientific_name_nznbbs <> ''),
    common_name_nznbbs          text NOT NULL CHECK (common_name_nznbbs <> ''),
    english_name_nznbbs         text NOT NULL CHECK (english_name_nznbbs <> ''),
    maori_name_nznbbs           text CHECK (maori_name_nznbbs <> ''),
    comments_nznbbs             text CHECK (comments_nznbbs <> ''),
    is_gamebird                 boolean,
    valid_band_prefixes         text CHECK (valid_band_prefixes <> '') /* TODO - add to CSV file of data. This field itself is a CSV */
);

/* Triggers */
DROP TRIGGER IF EXISTS species_update_timestamps_trigger on "species";

CREATE TRIGGER species_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "species" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS uidx_species_species_code_nznbbs ON species(species_code_nznbbs);
CREATE INDEX IF NOT EXISTS idx_species_common_name_nznbbs ON species(common_name_nznbbs);

/* 
==============================
 SPECIES GROUP
==============================
The species group table defines a species group.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS species_group CASCADE;

CREATE TABLE IF NOT EXISTS species_group (
/* -------------------------------------------------------- */
    /* Integer PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    name                        text CHECK (name <> '')
);

/* Triggers */
DROP TRIGGER IF EXISTS species_group_update_timestamps_trigger on "species_group";

CREATE TRIGGER species_group_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "species_group" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
-- <None>

/* 
==============================
 SPECIES GROUP MEMBERSHIP
==============================
The species group table defines which group a specific species belongs to.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS species_group_membership CASCADE;

CREATE TABLE IF NOT EXISTS species_group_membership (
/* -------------------------------------------------------- */
    /* Integer PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    group_id                    integer REFERENCES species_group(id) NOT NULL,
    species_id                  integer REFERENCES species(id) NOT NULL
);

/* Triggers */
DROP TRIGGER IF EXISTS species_group_membershipupdate_timestamps_trigger on "species_group_membership";

CREATE TRIGGER species_group_membership_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "species_group_membership" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
-- Species can only be a member of one group and one group only
CREATE UNIQUE INDEX IF NOT EXISTS uidx_species_group_membership ON species_group_membership(group_id, species_id);
CREATE INDEX IF NOT EXISTS idx_species_group_membership_species_id ON species_group_membership(species_id);
CREATE INDEX IF NOT EXISTS idx_species_group_membership_group_id ON species_group_membership(group_id);


/*
==============================
BIRD
==============================
This is the main table that manages bird entities. Birds are one of the
key entities managed by the system, the others being events and bands.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS bird CASCADE;

CREATE TABLE IF NOT EXISTS bird (
/* -------------------------------------------------------- */
    /* UUID PK */   
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    species_id                  integer REFERENCES species(id),
    friendly_name               text CHECK (friendly_name <> '')
);

DROP TRIGGER IF EXISTS bird_update_timestamps_trigger on "bird";

CREATE TRIGGER bird_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "bird" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS cidx_bird_row_creation_idx ON bird USING btree (row_creation_idx);
CREATE INDEX IF NOT EXISTS idx_bird_species_id ON bird(species_id);
CREATE INDEX IF NOT EXISTS idx_bird_friendly_name ON bird(friendly_name);


/*
==============================
BANDER
==============================
This table managers Banders in the system. Banders are related to users in the cognito user pool by their subject identifier
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS bander CASCADE;

CREATE TABLE IF NOT EXISTS bander (
/* -------------------------------------------------------- */   
    /* UUID PK */
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    nznbbs_certification_number text,
    is_hidden                   boolean DEFAULT FALSE,
    bander_state                enum_bander_state DEFAULT 'ACTIVE',
    primary_organisation        text,
    username                    text NOT NULL,
    person_name                 text NOT NULL,
    last_login                  timestamp with time zone
);

/* Triggers */

DROP TRIGGER IF EXISTS bander_update_timestamps_trigger on "bander";

CREATE TRIGGER bander_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "bander" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS cidx_bander_row_creation_index ON bander USING btree (row_creation_idx);
CREATE INDEX IF NOT EXISTS idx_bander_person_name ON bander(person_name);
CREATE INDEX IF NOT EXISTS idx_bander_nznbbs_certification_number ON bander(nznbbs_certification_number);


/*
# ==============================
# MARK
# ==============================
This table manages the various bands, i.e marks, in the system
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS mark CASCADE;

CREATE TABLE IF NOT EXISTS mark (
/* -------------------------------------------------------- */    
    /* UUID PK */   
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    prefix_number               text NOT NULL CHECK (prefix_number <> ''),
    short_number                text NOT NULL CHECK (short_number <> '')
);

/* Triggers */

DROP TRIGGER IF EXISTS mark_update_timestamps_trigger on "mark";

CREATE TRIGGER mark_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "mark" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_mark_prefix_num ON mark(prefix_number);
CREATE INDEX IF NOT EXISTS idx_mark_short_num ON mark(short_number);
CREATE INDEX IF NOT EXISTS idx_mark_prefix_num_short_num ON mark(prefix_number, short_number);
CREATE UNIQUE INDEX IF NOT EXISTS cidx_mark_row_creation_index ON mark USING btree (row_creation_idx);
CREATE INDEX IF NOT EXISTS idx_mark_short_number_int_idx ON mark(cast(NULLIF(regexp_replace(short_number, '\D', '', 'g'), '') AS bigint));

/*
==============================
PROJECT
==============================
This table manages the various projects in the system.
Projects may be directly editable by API methods.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS project CASCADE;

CREATE TABLE IF NOT EXISTS project (
/* -------------------------------------------------------- */    
    /* UUID PK */   
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    name                        text NOT NULL CHECK (name <> ''),
    project_state               enum_project_state DEFAULT 'AWAITING_APPROVAL' NOT NULL,
    description                 text,
    default_moratorium_expiry   timestamp with time zone,
    organisation                text,
    coordinator_id              uuid REFERENCES bander(id) NOT NULL,
    is_doc_project              boolean DEFAULT FALSE,
    location                    text,
    permit_id                   text,
    permit_expiry               timestamp with time zone
);

/* Triggers */
DROP TRIGGER IF EXISTS project_update_timestamps_trigger on "project";

CREATE TRIGGER project_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "project" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS cidx_project_row_creation_index ON project USING btree (row_creation_idx);
CREATE INDEX IF NOT EXISTS idx_project_name ON project(name ASC);
/*
==============================
CHARACTERISTIC
==============================
This table identifies a unique measurable characteristic
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS characteristic CASCADE;

CREATE TABLE IF NOT EXISTS characteristic (
/* -------------------------------------------------------- */    
    /* Integer PK */   
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    ss_source_name_             text NOT NULL CHECK (ss_source_name_ <> ''),    
    /* --- */
    name                        text NOT NULL CHECK (name <> ''),
    display                     text NOT NULL CHECK (display <> ''),
    datatype                    enum_characteristic_datatype NOT NULL,
    unit                        text CHECK (unit <> ''),
    unit_descriptor             text CHECK (unit_descriptor <> '')
);

/* Triggers */
DROP TRIGGER IF EXISTS characteristic_update_timestamps_trigger on "characteristic";

CREATE TRIGGER characteristic_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "characteristic"
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();


/* + + + + + */


/*
==============================
EVENT
==============================
This is the main event table. This table holds all events that have occurred, 
be they band activity events (relating to a bird), or band stock events.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS event CASCADE;

CREATE TABLE IF NOT EXISTS event (
/* -------------------------------------------------------- */    
    /* UUID PK */   
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    event_type                  enum_event_type NOT NULL,
    event_state                 enum_event_state NOT NULL,
    event_banding_scheme        enum_event_banding_scheme NOT NULL,
    event_timestamp             timestamp with time zone NOT NULL,
    event_timestamp_accuracy    enum_event_event_timestamp_accuracy,
    event_capture_type          enum_event_capture_type,
    event_owner_id              uuid REFERENCES bander(id) NOT NULL, /* ID of the bander owner of this event. This is the L3 bander responsible for the event. Always present. */    
    event_bird_situation        enum_event_bird_situation,
    event_reporter_id           uuid REFERENCES bander(id) NOT NULL, /* ID of the bander who reported this event. Not necessarily the uploader. Always present. */
    event_provider_id           uuid REFERENCES bander(id) NOT NULL, /* ID of the bander who provided (i.e. uploaded) this event. Always present */
    event_other_person_name     text,
    event_other_contact         text,
    bird_id                     uuid REFERENCES bird(id), /* ID of the bird to which this event applies. May not be present if this is a stock event */
    project_id                  uuid REFERENCES project(id), /* ID of the project under which this event was submitted */
    latitude                    numeric CHECK (latitude >= -90 AND latitude <= 90),                   
    longitude                   numeric CHECK (longitude >= -180 AND longitude <= 180 ),
    location                    geography, /* Location, in lat/lon, where this event took place. May not be present if this is a stock event */
    location_description        text, /* Location descrption. May not be present if this is a stock event */
    location_comment            text, /* This is the equivalent of the incoming region code */
    locality_general            text, /* General Locality. May not be present if this is a stock event */
    locality_accuracy           integer, /* General Locality. May not be present if this is a stock event */
    user_coordinate_system      enum_event_user_coordinate_system,
    user_northing               numeric,
    user_easting                numeric,
    transfer_recipient_id       uuid,
    mark_count                  integer,
    spreadsheet_id              uuid REFERENCES bander_uploads(id),
    comments                    text
);

/* Triggers */

/* Timestamp */
DROP TRIGGER IF EXISTS event_update_timestamps_trigger on "event";

CREATE TRIGGER event_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "event"
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Geography */
DROP TRIGGER IF EXISTS event_update_location_geography_trigger on "event";

CREATE TRIGGER event_update_location_geography_trigger
BEFORE INSERT OR UPDATE
ON "event"
FOR EACH ROW 
EXECUTE PROCEDURE update_location_geography();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_event_reporter_id ON event(event_reporter_id);
CREATE INDEX IF NOT EXISTS idx_event_provider_id ON event(event_provider_id);
CREATE INDEX IF NOT EXISTS idx_event_bird_id ON event(bird_id);
CREATE INDEX IF NOT EXISTS idx_event_project_id ON event(project_id);
CREATE INDEX IF NOT EXISTS idx_event_timestamp ON event(event_timestamp);
CREATE INDEX IF NOT EXISTS idx_row_creation_timestamp ON event(row_creation_timestamp_);
CREATE INDEX IF NOT EXISTS idx_event_type ON event(event_type);
CREATE INDEX IF NOT EXISTS idx_event_banding_scheme ON event(event_banding_scheme);
CREATE INDEX IF NOT EXISTS idx_event_location_description ON event(location_description);
CREATE INDEX IF NOT EXISTS idx_event_latitude ON event(latitude);
CREATE INDEX IF NOT EXISTS idx_event_longitude ON event(longitude);
CREATE INDEX IF NOT EXISTS idx_event_latlong ON event(latitude, longitude);
CREATE UNIQUE INDEX IF NOT EXISTS cidx_event_row_creation_index ON event USING btree (row_creation_idx);

/*
==============================
EVENT MEDIA
==============================
This table stores media captured alongside a specific event, i.e photos.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS event_media CASCADE;

CREATE TABLE IF NOT EXISTS event_media (
/* -------------------------------------------------------- */  
    /* INTEGER PK */  
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    event_id                    uuid REFERENCES event(id),
    storage_host                text NOT NULL CHECK (storage_host <> ''), /* Usually the name of the S3 bucket*/
    object_path                 text NOT NULL CHECK (object_path <> ''), /* Full path to the object in the bucket */
    object_version              text NOT NULL CHECK (object_version <> '') /* Bucket object version */
);

/* Triggers */
DROP TRIGGER IF EXISTS event_media_update_timestamps_trigger on "event_media";

CREATE TRIGGER event_media_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "event_media" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_event_media_event_id ON event_media(event_id);


/*
==============================
PUBLIC-EVENT
==============================
This is the main event table. This table holds all events that have occurred, 
be they band activity events (relating to a bird), or band stock events.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS public_event CASCADE;

CREATE TABLE IF NOT EXISTS public_event (
/* -------------------------------------------------------- */    
    /* UUID PK */   
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    row_creation_idx            integer GENERATED BY DEFAULT AS IDENTITY,
    /* --- */
    public_event_status         enum_public_event_status NOT NULL,
    event_type                  enum_event_type NOT NULL,
    out_status_code             enum_status_code NOT NULL,
    out_condition_code          enum_condition_code,
    species_id                  integer REFERENCES species(id),
    event_timestamp             timestamp with time zone NOT NULL,
    latitude                    numeric CHECK (latitude >= -90 AND latitude <= 90),                   
    longitude                   numeric CHECK (longitude >= -180 AND longitude <= 180 ),
    location                    geography, /* Location, in lat/lon, where this event took place. May not be present if this is a stock event */
    location_description        text, /* Location descrption. May not be present if this is a stock event */
    location_comment            text, /* This is the equivalent of the incoming region code */
    other_mark_comments         text,
    contact_person_name         text NOT NULL,
    contact_email               text NOT NULL,
    follow_up_requested         boolean NOT NULL,
    count_event_media_requested integer NOT NULL,
    comments                    text,
    mark_configuration          jsonb
);

/* Triggers */

/* Timestamp */
DROP TRIGGER IF EXISTS public_event_update_timestamps_trigger on "public_event";

CREATE TRIGGER public_event_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "public_event"
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Geography */
DROP TRIGGER IF EXISTS public_event_update_location_geography_trigger on "public_event";

CREATE TRIGGER public_event_update_location_geography_trigger
BEFORE INSERT OR UPDATE
ON "public_event"
FOR EACH ROW 
EXECUTE PROCEDURE update_location_geography_wgs84();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS cidx_public_event_row_creation_index ON public_event USING btree (row_creation_idx);

/*
==============================
PUBLIC EVENT MEDIA
==============================
This table stores media captured alongside a specific event, i.e photos.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS public_event_media CASCADE;

CREATE TABLE IF NOT EXISTS public_event_media (
/* -------------------------------------------------------- */  
    /* INTEGER PK */  
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    public_event_id             uuid REFERENCES public_event(id),
    storage_host                text NOT NULL CHECK (storage_host <> ''), /* Usually the name of the S3 bucket*/
    object_path                 text NOT NULL CHECK (object_path <> ''), /* Full path to the object in the bucket */
    object_version              text CHECK (object_version <> ''), /* Bucket object version */
    upload_status               enum_media_upload_status NOT NULL
);

CREATE OR REPLACE FUNCTION update_public_event_media_object_path()
/* -------------------------------------------------------- */
RETURNS TRIGGER 
AS 
$$
BEGIN
    IF TG_OP = 'INSERT' THEN 
        NEW.object_path = 'public_raw/public_event_' || NEW.public_event_id || '/media_' || NEW.id || '.jpg';
        RETURN NEW;
    END IF;
END;
$$ 
LANGUAGE 'plpgsql';

/* Triggers */
DROP TRIGGER IF EXISTS public_event_media_update_timestamps_trigger on "public_event_media";

CREATE TRIGGER public_event_media_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "public_event_media" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

DROP TRIGGER IF EXISTS public_event_media_object_path_trigger on "public_event_media";

CREATE TRIGGER public_event_media_object_path_trigger
BEFORE INSERT
ON "public_event_media" 
FOR EACH ROW 
EXECUTE PROCEDURE update_public_event_media_object_path();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_public_event_media_public_event_id ON public_event_media(public_event_id);

/*
==============================
MARK CONFIGURATION
==============================
This table stores mark configurations relative to an event. It is intended that
all active marks be captured against an event every time. In this way, it is
always possible to retrieve the current state of marks attached to a bird.

This is ugly, since a mark can be one of our bands, i.e. a metal one that we know about
or some other random marking applied by someone else anywhere in the world. If it's one
of our bands, we can reference it, but if not, we need to capture the details.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS mark_configuration CASCADE;

CREATE TABLE IF NOT EXISTS mark_configuration (
/* -------------------------------------------------------- */  
    /* INTEGER PK */   
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    event_id                    uuid REFERENCES event(id) NOT NULL, /* Event which resulted in the recording of this mark configuration */
    mark_id                     uuid REFERENCES mark(id), /* Mark ID will be NULL for coloured bands attached to a bird. Coloured bands are NOT held in this system */
    mark_type                   enum_mark_type NOT NULL,
    mark_material               enum_mark_material,
    mark_form                   enum_mark_form,
    mark_fixing                 enum_mark_fixing,
    colour                      enum_mark_colour,
    text_colour                 enum_mark_colour,
    alphanumeric_text           text CHECK (alphanumeric_text <> ''),    
    side                        enum_mark_configuration_side,
    position                    enum_mark_configuration_position,
    location_idx                integer CHECK (location_idx >= 0),
    other_description           text CHECK (other_description <> '')
);

DROP TRIGGER IF EXISTS mark_configuration_update_timestamps_trigger on "mark_configuration";

CREATE TRIGGER mark_configuration_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "mark_configuration" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_mark_configuration_event_id ON mark_configuration(event_id);
CREATE INDEX IF NOT EXISTS idx_mark_configuration_mark_id ON mark_configuration(mark_id);

/*
==============================
CHARACTERISTIC MEASUREMENT
==============================
This table stores characteristic measurements relative to an event. It is intended that
all characteristic measurements are captured against an event every time. In this way, it is
always possible to retrieve the current state of measurements of a bird.

This is ugly, since a measured characteristic can be one of many datatypes.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS characteristic_measurement CASCADE;

CREATE TABLE IF NOT EXISTS characteristic_measurement (
/* -------------------------------------------------------- */  
    /* INTEGER PK */  
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    event_id                    uuid REFERENCES event(id) NOT NULL, /* Event which resulted in the recording of this characteristic measurement */
    characteristic_id           integer REFERENCES characteristic(id) NOT NULL,
    value                       text NOT NULL CHECK (value <> '')
);

DROP TRIGGER IF EXISTS characteristic_measurement_update_timestamps_trigger on "characteristic_measurement";

CREATE TRIGGER characteristic_measurement_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "characteristic_measurement" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_characteristic_measurement_event_id ON characteristic_measurement(event_id);
CREATE INDEX IF NOT EXISTS idx_characteristic_measurement_event_id_char_id ON characteristic_measurement(event_id,characteristic_id);

/*
==============================
MARK ALLOCATION
==============================
This table stores the mark allocation history.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS mark_allocation CASCADE;

CREATE TABLE IF NOT EXISTS mark_allocation (
/* -------------------------------------------------------- */   
    /* INTEGER PK */     
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */      
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    event_id                    uuid REFERENCES event(id) NOT NULL, /* Event which resulted in the recording of this mark allocation */
    mark_id                     uuid REFERENCES mark(id) NOT NULL,
    bander_id                   uuid REFERENCES bander(id) NOT NULL,
    allocation_idx              integer NOT NULL,
    is_current                  boolean DEFAULT FALSE NOT NULL
);

DROP TRIGGER IF EXISTS mark_allocation_update_timestamps_trigger on "mark_allocation";

CREATE TRIGGER mark_allocation_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "mark_allocation" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_mark_allocation_event_id ON mark_allocation(event_id);
CREATE INDEX IF NOT EXISTS idx_mark_allocation_mark_id ON mark_allocation(mark_id);
CREATE INDEX IF NOT EXISTS idx_mark_allocation_bander_id ON mark_allocation(bander_id);
CREATE INDEX IF NOT EXISTS idx_mark_allocation_mark_event_id ON mark_allocation(mark_id, event_id);
CREATE INDEX IF NOT EXISTS idx_mark_allocation_allocation_idx ON mark_allocation(allocation_idx);

/*
==============================
MARK STATE
==============================
This table stores the mark state history.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS mark_state CASCADE;

CREATE TABLE IF NOT EXISTS mark_state (
/* -------------------------------------------------------- */   
    /* INTEGER PK */     
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */      
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    event_id                    uuid REFERENCES event(id) NOT NULL, /* Event which resulted in the recording of this mark state change */
    mark_id                     uuid REFERENCES mark(id) NOT NULL,
    state                       enum_mark_state NOT NULL,
    state_idx                   integer NOT NULL,
    is_current                  boolean DEFAULT FALSE NOT NULL
);

DROP TRIGGER IF EXISTS mark_state_update_timestamps_trigger on "mark_state";

CREATE TRIGGER mark_state_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "mark_state" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_mark_state_event_id ON mark_state(event_id);
CREATE INDEX IF NOT EXISTS idx_mark_state_mark_id ON mark_state(mark_id);
CREATE INDEX IF NOT EXISTS idx_mark_state_state ON mark_state(state);
CREATE INDEX IF NOT EXISTS idx_mark_state_mark_event_id ON mark_state(mark_id, event_id);
CREATE INDEX IF NOT EXISTS idx_mark_state_state_idx ON mark_state(state_idx);
CREATE INDEX IF NOT EXISTS idx_mark_state_state_and_is_current ON mark_state(state, is_current);

/*
=====================================
MARK STOCK AGGREGATION ROLLUP TABLE
=====================================
This table stores the mark stock aggregated for each bander.
*/

DROP TABLE IF EXISTS mark_stock_aggregation_rollup CASCADE;

CREATE TABLE IF NOT EXISTS mark_stock_aggregation_rollup (
/* -------------------------------------------------------- */   
    /* INTEGER PK */     
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */      
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    bander_id                   uuid REFERENCES bander(id) NOT NULL,
    prefix_number               text NOT NULL,
    number_of_bands             integer NOT NULL,
    last_short_number           text NOT NULL
);

DROP TRIGGER IF EXISTS mark_stock_agg_update_timestamps_trigger on "mark_stock_aggregation_rollup";

CREATE TRIGGER mark_stock_agg_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "mark_stock_aggregation_rollup" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_mark_stock_bander_id ON mark_stock_aggregation_rollup(bander_id);


/*
==============================
BANDER CERTIFICATIONS
==============================
This table stores certifications of individual banders
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS bander_certifications CASCADE;

CREATE TABLE IF NOT EXISTS bander_certifications (
/* -------------------------------------------------------- */   
    /* INTEGER PK */ 
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    bander_id                   uuid REFERENCES bander(id) NOT NULL,
    species_group_id            integer REFERENCES species_group(id),
    valid_from_timestamp        timestamp with time zone,
    valid_to_timestamp          timestamp with time zone,
    competency_level            enum_competency_level NOT NULL,
    certification_comment       text,
    endorsement                 enum_endorsement  
);

DROP TRIGGER IF EXISTS bander_certifications_update_timestamps_trigger on "bander_certifications";

CREATE TRIGGER bander_certifications_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "bander_certifications" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_bander_certifications_bander_id ON bander_certifications(bander_id);

/* Constraints */
ALTER TABLE public.bander_certifications ADD CONSTRAINT one_end_per_bander UNIQUE (endorsement, bander_id);
ALTER TABLE public.bander_certifications ADD CONSTRAINT one_spi_per_bander UNIQUE (species_group_id, bander_id);

/*
==============================
BANDER CERTIFICATION MEDIA
==============================
This table stores media associated with certifications of individual banders
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS certification_media CASCADE;

CREATE TABLE IF NOT EXISTS certification_media (
/* -------------------------------------------------------- */
    /* INTEGER PK */ 
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */       
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    certification_id            integer REFERENCES bander_certifications(id),
    storage_host                text NOT NULL CHECK (storage_host <> ''), /* Usually the name of the S3 bucket*/
    object_path                 text NOT NULL CHECK (object_path <> ''), /* Full path to the object in the bucket */
    object_version              text NOT NULL CHECK (object_version <> '') /* Bucket object version */
);

DROP TRIGGER IF EXISTS certification_media_update_timestamps_trigger on "certification_media";

CREATE TRIGGER certification_media_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "certification_media" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_certification_media_certification_id ON certification_media(certification_id);

/*
==============================
PROJECT BANDER INVITATIONS
==============================
This table stores all project bander invitations. An invitation must be accepted before
a bander is added to a project.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS project_bander_invitations CASCADE;

CREATE TABLE IF NOT EXISTS project_bander_invitations (
/* -------------------------------------------------------- */
    /* INTEGER PK */  
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */      
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    project_id                  uuid REFERENCES project(id) NOT NULL,
    inviter_id                  uuid REFERENCES bander(id) NOT NULL,
    invitee_id                  uuid REFERENCES bander(id) NOT NULL,
    invitation_state            enum_invitation_state NOT NULL
);

DROP TRIGGER IF EXISTS project_bander_invitations_update_timestamps_trigger on "team_bander_invitations";

CREATE TRIGGER project_bander_invitations_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "project_bander_invitations" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS idx_project_bander_invitations ON project_bander_invitations(project_id, inviter_id, invitee_id);

/*
==============================
PROJECT BANDER MEMBERSHIP
==============================
This table stores all project-bander memberships, i.e. which individual banders are 
members of which project. The table layout does not store history.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS project_bander_membership CASCADE;

CREATE TABLE IF NOT EXISTS project_bander_membership (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    project_id                  uuid REFERENCES project(id) NOT NULL,
    bander_id                   uuid REFERENCES bander(id) NOT NULL,
    is_deleted                  boolean DEFAULT FALSE NOT NULL

);

DROP TRIGGER IF EXISTS project_bander_membership_update_timestamps_trigger on "project_bander_membership";

CREATE TRIGGER project_bander_membership_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "project_bander_membership" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE UNIQUE INDEX IF NOT EXISTS idx_project_bander_membership ON project_bander_membership(project_id, bander_id);

/*
==============================
PROJECT NOTICES
==============================
This table stores all project notices.
*/

/* Do you really want to uncomment this...?*/
DROP TABLE IF EXISTS project_notices CASCADE;

CREATE TABLE IF NOT EXISTS project_notices (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    project_id                  uuid REFERENCES project(id) NOT NULL,
    notice_poster_id            uuid REFERENCES bander(id) NOT NULL,
    notice_text                 text CHECK (notice_text <> '')
);

/*
==============================
BANDER DOWNLOADS
==============================
This table stores all bander downloads.
*/

DROP TABLE IF EXISTS bander_downloads CASCADE;

CREATE TABLE IF NOT EXISTS bander_downloads (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    download_status             enum_download_status NOT NULL,
    is_advanced_search          boolean DEFAULT FALSE NOT NULL,
    query                       text CHECK (row_update_user_ <> ''),
    number_of_rows              integer NOT NULL,
    file_size_in_bytes          integer,
    moratorium_data_included    boolean NOT NULL,
    object_path                 text CHECK (object_path <> ''), /* Full path to the object in the bucket */
    object_version              text CHECK (object_version <> ''), /* Bucket object version */
    bander_id                   uuid REFERENCES bander(id) NOT NULL
);

DROP TRIGGER IF EXISTS bander_downloads_update_timestamps_trigger on "bander_downloads";

CREATE TRIGGER bander_downloads_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "bander_downloads" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_bander_downloads_download_status ON bander_downloads(download_status);
CREATE INDEX IF NOT EXISTS idx_bander_downloads_bander_id ON bander_downloads(bander_id);

/*
==============================
CMS - CONTENT
==============================
This table stores the CMS generated content 
*/
DROP TABLE IF EXISTS cms_content CASCADE;
CREATE TABLE IF NOT EXISTS cms_content (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    name                        varchar(50) CHECK (name <> ''),
    html                        text CHECK (html <> ''),
    link_label                  varchar(100) CHECK (link_label <> ''),
    visibility                  varchar(100) CHECK (visibility <> ''),
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> '')
   
);
DROP TRIGGER IF EXISTS content_update_timestamps_trigger on "cms_content";
CREATE TRIGGER content_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "cms_content" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();
/*==============================
CMS - ATTACHMENTS
  ==============================
This table stores details and file path to uploaded attachments
*/
DROP TABLE IF EXISTS cms_attachment CASCADE;
CREATE TABLE IF NOT EXISTS cms_attachment (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    storage_host                text CHECK (storage_host <> ''),
    object_path                 varchar(200) CHECK (object_path <> ''),
    context                     text CHECK (context <> '')
  
);

DROP TRIGGER IF EXISTS attachment_update_timestamps_trigger on "cms_attachment";
CREATE TRIGGER attachment_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "cms_attachment" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();


/*
==============================
BANDER DOWNLOADS
==============================
This table stores all bander downloads.
*/

DROP TABLE IF EXISTS bander_uploads CASCADE;

CREATE TABLE IF NOT EXISTS bander_uploads (
/* -------------------------------------------------------- */  
    /* INTEGER PK */
    id                          uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
    /* Pseudo-header */    
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    upload_status               enum_upload_status NOT NULL,
    file_size_in_bytes          integer,
    no_of_rows		              integer,
    storage_host                text NOT NULL CHECK (storage_host <> ''), /* Usually the name of the S3 bucket*/
    object_path                 text CHECK (object_path <> ''), /* Full path to the object in the bucket */
    object_version              text CHECK (object_version <> ''), /* Bucket object version */
    errors                      jsonb,
    criticals_count             integer,
    warnings_count              integer,
    bander_id                   uuid REFERENCES bander(id) NOT NULL,
    project_id                  uuid REFERENCES project(id) NOT NULL
);

DROP TRIGGER IF EXISTS bander_uploads_update_timestamps_trigger on "bander_uploads";

CREATE TRIGGER bander_uploads_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "bander_uploads" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_bander_uploads_upload_status ON bander_uploads(upload_status);
CREATE INDEX IF NOT EXISTS idx_bander_uploads_bander_id ON bander_uploads(bander_id);

/* 
==============================
 RECORD ACTION
==============================
The record_action table defines all the identifiers for all rows deleted by the 
birdbanding service. This is constructed to support the modern data platform team
in their efforts to sync with the birdbanding database periodically.
*/

DROP TABLE IF EXISTS record_action CASCADE;

CREATE TABLE IF NOT EXISTS record_action (
/* -------------------------------------------------------- */
    /* Integer PK */
    id                          integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    /* Pseudo-header */
    row_creation_timestamp_     timestamp with time zone NOT NULL,
    row_creation_user_          text NOT NULL CHECK (row_creation_user_ <> ''),
    row_update_timestamp_       timestamp with time zone,
    row_update_user_            text CHECK (row_update_user_ <> ''),
    /* --- */
    db_action                   enum_db_log_action,
    db_table                    text NOT NULL,
    db_table_identifier_name    text NOT NULL,
    db_table_identifier_value   text NOT NULL
);

/* Triggers */
DROP TRIGGER IF EXISTS record_action_update_timestamps_trigger on "record_action";

CREATE TRIGGER record_action_update_timestamps_trigger
BEFORE INSERT OR UPDATE
ON "record_action" 
FOR EACH ROW 
EXECUTE PROCEDURE update_row_modified_timestamp();

/* Indexes */
CREATE INDEX IF NOT EXISTS idx_record_action_row_creation_timestamp_ ON record_action(row_creation_timestamp_);
CREATE INDEX IF NOT EXISTS idx_record_action_row_update_timestamp_ ON record_action(row_update_timestamp_);

-- Read-Only User - Table access
GRANT SELECT ON ALL TABLES IN SCHEMA public TO birdbanding_readonly;
GRANT SELECT ON ALL TABLES IN SCHEMA tiger TO birdbanding_readonly;

-- read-Write User - Table access
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO birdbanding_readwrite;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA tiger TO birdbanding_readwrite;

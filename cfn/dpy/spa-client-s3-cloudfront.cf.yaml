---
## This template creates an S3 bucket behind a CloudFront distribution for web hosting purposes.
## The template can be configured in multiple ways via parameters, but does depend on a WAF setup.

AWSTemplateFormatVersion: '2010-09-09'
Description: 'DOC Data Service Template - S3/Cloudfront-Hosted Single Page Client App'

## ::METADATA::
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
    #---------------
      - Label: 
          default: "General Configuration"
        Parameters:
          - environment
          - serviceName
      - Label:
          default: "Network Configuration"
        Parameters:
          - referenceACMCertArn
          - wafACLId
      - Label:
          default: "Logging Configuration"
        Parameters:  
          - logBucketName
      - Label:
          default: "Upload Queue Trigger Configuration"
        Parameters:  
          - uploadQueuePrefix
          - uploadQueueSuffix
          - uploadQueueArn
      - Label:
          default: 'Cross-References'
        Parameters:
          - referencePublicZoneId

    ParameterLabels:
    #---------------  
      # General Parameters
      environment:
        default: "Operational environment:"
      serviceName:
        default: 'Service name'

      # Network Parameters
      referenceACMCertArn:
        default: "TLS Certificate Arn:"
      wafACLId:
        default: "WAF ACL ID:"        

      # Logging Configuration
      logBucketName:
        default: "Full name of logging bucket:"

      # S3 upload trigger function s3 prefix
      uploadQueuePrefix:
        default: "S3 Upload trigger prefix (optional):"

      # S3 upload trigger function s3 suffix
      uploadQueueSuffix:
        default: "S3 Upload trigger suffix (optional):"

      # S3 upload trigger function arn
      uploadQueueArn:
        default: "S3 Upload trigger queue ARN (optional):"

      # Cross-References
      referencePublicZoneId:
        default: 'Public Zone ID:'

## ::PARAMETERS::
## Template parameters to be configured by user
Parameters:

  # General Configuration
  environment:
    Type: String
    ConstraintDescription: 'Operational environment'
    AllowedValues:
    - 'Example'
    Default: 'Example'

  serviceName:
    Type: String
    ConstraintDescription: 'Must be between 3 - 32 characters long.'
    AllowedPattern: "^[A-Za-z0-9-]{3,32}$"
    MinLength: 3
    MaxLength: 32
    Default: 'unknownservicename'

  # Network Configuration

  referenceACMCertArn:
    Type: String
    Description: 'ARN of the SSL Certificate managing this deployment'

  wafACLId:
    Description: '(Optional) If provided, the Cloudfront distribution is hooked up to the passed WAF. If omitted, a new one is created here.'
    Type: String
    Default: ''

  # Log Bucket Name
  logBucketName:
    Type: String
    ConstraintDescription: 'Must be between 3 - 63 characters long. The bucket must already exist.'
    # AllowedPattern: "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$"
    MaxLength: 63
    Default: ''

  # Upload queue S3 prefix
  uploadQueuePrefix:
    Type: String
    Default: ''

  # Upload queue S3 suffix
  uploadQueueSuffix:
    Type: String
    Default: ''

  # Upload queue ARN triggered after an S3 upload
  uploadQueueArn:
    Type: String
    Default: ''

  # Cross-References
  referencePublicZoneId:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Description: 'Must exist in the SSM parameter store'

## ::CONDITIONS::
Conditions:
  IsExampleEnv: !Equals [!Ref environment, 'Example' ]
  HasLoggingBucket: !Not [!Equals [ !Ref logBucketName, '' ]]
  HasWAFACLID: !Not [!Equals [ !Ref wafACLId, '' ]]
  IsNotExampleEnv: !Not [!Equals [ !Ref environment, 'Example' ]]
  HasS3QueueTrigger: !Not [!Equals [ !Ref uploadQueueArn, '' ]]
  HasS3PrefixForQueueTrigger: !Not [!Equals [ !Ref uploadQueuePrefix, '' ]]
  HasS3SuffixForQueueTrigger: !Not [!Equals [ !Ref uploadQueueSuffix, '' ]]

## ::MAPPINGS::  
Mappings:
  # Environment-Specific Config
  EnvConfig:
    Example:
      EnvToLower: 'example'
      AccountPrefix: 'exampleprefix'
      DomainPrefix: 'example.'

## ::RESOURCES::
Resources:

  # ++++++++++++++++++++++++++++++
  # BUCKET
  # ++++++++++++++++++++++++++++++

  # Single-Page Application Bucket
  SPABucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: 'Retain'
    Properties:
      # Versioning Config
      VersioningConfiguration:
        Status: Enabled
      # Logging Config
      LoggingConfiguration: !If
        - HasLoggingBucket
        - DestinationBucketName: !Ref 'logBucketName'
          LogFilePrefix: !Sub 
          - '${env}-${service}-spa-client'
          - { 
              env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
              service: !Ref serviceName
            }     
        - !Ref AWS::NoValue
      # Website Configuration
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref 'environment'

  # Data Upload Queue
  UploadInitiationQueue:
    Type: "AWS::SQS::Queue" 
    Properties: 
      QueueName:  !Sub 
          - '${env}-${service}-data-upload-queue'
          - { 
              env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
              service: !Ref serviceName
            }     
      VisibilityTimeout: 910
      Tags:              
        - Key: Environment
          Value:  !FindInMap [ EnvConfig, !Ref environment, EnvToLower ]

  UploadInitiationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - UploadInitiationQueue
    Properties:
      PolicyDocument:
        Id: UploadInitiationQueuePolicy
        Version: '2012-10-17'
        Statement:
          # --------------------
          - Sid: LambdaSendAndReceiveFromQueue
            # --------------------------
            Principal:
              AWS: '*'
            Effect: Allow
            Action:
              - 'sqs:SendMessage'
              - 'sqs:GetQueueUrl'
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:ListQueues'
            Resource: !GetAtt UploadInitiationQueue.Arn
      Queues:
        - !Ref UploadInitiationQueue


  # Single-Page Application Bucket
  UserAssetsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: 'Retain'
    Properties:
      # Versioning Config
      VersioningConfiguration:
        Status: Suspended
      # Logging Config
      LoggingConfiguration: !If
        - HasLoggingBucket
        - DestinationBucketName: !Ref 'logBucketName'
          LogFilePrefix: !Sub 
          - '${env}-${service}-user-assets'
          - { 
              env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
              service: !Ref serviceName
            }     
        - !Ref AWS::NoValue
      # Notification Config
      NotificationConfiguration: 
        QueueConfigurations: !If
          - HasS3QueueTrigger
          - - Event: s3:ObjectCreated:*
              Filter: 
                S3Key: 
                  Rules:
                    - Name: prefix
                      Value: !If
                        - HasS3PrefixForQueueTrigger
                        - !Ref uploadQueuePrefix
                        - !Ref AWS::NoValue
                    - Name: suffix
                      Value: !If
                        - HasS3SuffixForQueueTrigger
                        - !Ref uploadQueueSuffix
                        - !Ref AWS::NoValue
              Queue: !Ref uploadQueueArn
          - !Ref AWS::NoValue
      # CORs Config
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:               
              - !Sub
                - 'https://app.${env}${service}.example.org'
                - { 
                    env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
                    service: !Ref serviceName
                  }
              - !Sub
                - 'https://${env}${service}.example.org'
                - { 
                    env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
                    service: !Ref serviceName
                  }
              - !If
                - IsExampleEnv
                - "http://localhost:4200"
                - !Ref AWS::NoValue
              - !If
                - IsExampleEnv
                - "https://xxxxxxx.cloudfront.net"
                - !Ref AWS::NoValue
            AllowedMethods: 
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders: 
              - "*"
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref 'environment'

  PublicUserAssetsPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties: 
      Bucket: !Ref 'UserAssetsBucket'
      PolicyDocument:
        Statement:
          -
            Sid: 'Provide open access for all objects on the public path'
            Action:
              - s3:GetObject
            Effect: 'Allow'
            Resource: !Sub '${UserAssetsBucket.Arn}/public/*'
            Principal: '*'
          # -
          #   Sid: 'Provide open access for all objects on the public path'
          #   Action:
          #     - s3:DeleteObject
          #   Effect: 'Allow'
          #   Resource: !Sub '${UserAssetsBucket.Arn}/public/*'
          #   Principal:
          #     AWS: !Sub 
          #           - 'arn:aws:iam::${AWS::AccountId}:role/${env}-${service}-lambda-exec-read-write'
          #           - {
          #               env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          #               service: !Ref serviceName
          #             }
            

  SPABucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: 'SPACloudFrontOAI'
    Properties: 
      Bucket: !Ref 'SPABucket'
      PolicyDocument:
        Statement:
          -
            Sid: 'Grant a CloudFront Origin Identity access to support private content'
            Action:
              - s3:GetObject
            Effect: 'Allow'
            Resource: !Sub '${SPABucket.Arn}/*'
            Principal:
              CanonicalUser: !GetAtt 'SPACloudFrontOAI.S3CanonicalUserId'

  # ++++++++++++++++++++++++++++++
  # CLOUDFRONT DISTRIBUTION
  # ++++++++++++++++++++++++++++++

  # CloudFront Origin Access Identity
  SPACloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 
        - '${env}-${service}-client-origin-access-identity'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }

  # CloudFront Distribution
  SPACloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        # Aliases is an array. Don't be fooled by the syntax, this is just one value in the array.
        Aliases: 
        - !Sub
          - '${env}${service}.example.org'
          - {
            env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
            service: !Ref serviceName
            }
        - !Sub
          - 'app.${env}${service}.example.org'
          - {
            env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
            service: !Ref serviceName
            }
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - DELETE
            - PATCH
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS         
          DefaultTTL: 300
          ForwardedValues: 
            QueryString: False          
          MaxTTL: 86400
          TargetOriginId: 'SPA-App-Bucket'
          ViewerProtocolPolicy: 'redirect-to-https'
        Comment: !Sub
          - 'Cloudfront distribution for app.${env}${service}.example.org'
          - {
            env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
            service: !Ref serviceName
            }
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: "/index.html"
            ResponseCode: '200'
          - ErrorCode: '403'
            ResponsePagePath: "/index.html"
            ResponseCode: '200'            
        DefaultRootObject: 'index.html'
        Enabled: True
        HttpVersion: 'http2'
        IPV6Enabled: False
        Logging: !If
          - HasLoggingBucket
          - Bucket: !Sub '${logBucketName}.s3.amazonaws.com'
            IncludeCookies: True
            Prefix: !Sub '${serviceName}-${environment}-CloudFront'
          - !Ref AWS::NoValue
        Origins:
          - Id: 'SPA-App-Bucket'
            DomainName: !GetAtt 'SPABucket.DomainName'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${SPACloudFrontOAI}'
        ViewerCertificate:
          MinimumProtocolVersion: 'TLSv1.2_2018'
          AcmCertificateArn: !Ref 'referenceACMCertArn'
          SslSupportMethod: 'sni-only'
        WebACLId: 
          !If
            - HasWAFACLID
            - !Ref 'wafACLId'
            - !Ref AWS::NoValue
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref 'environment'

  ## ROUTE53

  # App Root A-Recordset
  ARecordSet:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref referencePublicZoneId
      RecordSets:
        - Name: !Sub 
          - '${env}${service}.example.org'
          - { 
              env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
              service: !Ref serviceName
            }
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt SPACloudFrontDistribution.DomainName

  # App A-Recordset
  AppARecordSet:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref referencePublicZoneId
      RecordSets:
        - Name: !Sub 
          - 'app.${env}${service}.example.org'
          - { 
              env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
              service: !Ref serviceName
            }
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt SPACloudFrontDistribution.DomainName

  # SSM Parameters for use elsewhere

  # Application Endpoint.
  # Depending on what issues you're having, this could be the 
  # S3 bucket URL, cloudfront distribution domain name or a custom
  # endpoint if you've set up everything correctly. At the current
  # time (02/07/2019), we've got DNS issues, so the app endpoint
  # is just the cloudfront distribution name. Once DNS issues are
  # sorted out, we change the value of this parameter, and the CICD
  # pipeline should do the rest. This parameter value is like a
  # wrapper, abstracting the actual endpoint value.
  SPAClientAppEndpoint:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Actual endpoint of the client application"
      Name: !Sub
        - '/${env}/${service}/client-app/endpoint'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Sub 
        - 'app.${env}${service}.example.org'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
            service: !Ref serviceName
          }
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  SPAClientEndpoint:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Actual endpoint of the application (minus the app prefix)"
      Name: !Sub
        - '/${env}/${service}/client/endpoint'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Sub 
        - '${env}${service}.example.org'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
            service: !Ref serviceName
          }
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA Bucket Name
  SPABucketName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the bucket hosting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/bucket/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref SPABucket
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA Bucket ARN
  SPABucketArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the bucket hosting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/bucket/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt SPABucket.Arn
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # User Assets Bucket Name
  UserAssetsBucketName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the bucket hosting the Apps User Assets"
      Name: !Sub
        - '/${env}/${service}/user-assets/bucket/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref UserAssetsBucket
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # User Assets Bucket ARN
  UserAssetsBucketArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the bucket hosting the Apps User Assets"
      Name: !Sub
        - '/${env}/${service}/user-assets/bucket/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt UserAssetsBucket.Arn
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA Bucket Domain Name
  SPABucketDomainName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Domain name of the bucket hosting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/bucket/domain-name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt SPABucket.DomainName
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA Bucket Website URL
  SPABucketWebsiteUrl:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "URL of the bucket hosting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/bucket/url'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt SPABucket.WebsiteURL
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA CloudFront Distribution Name
  SPACloudFrontDistributionName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the Cloudfront distribution fronting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/cloudfront-distribution/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref SPACloudFrontDistribution
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA CloudFront Distribution Domain Name
  SPACloudFrontDistributionDomainName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Domain Name of the Cloudfront distribution fronting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/cloudfront-distribution/domain-name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt SPACloudFrontDistribution.DomainName
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA CloudFront OAI
  SPACloudFrontDistributionOAI:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Origin Access Identity for the Cloudfront distribution fronting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/cloudfront-distribution/oai'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref SPACloudFrontOAI
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

  # SPA CloudFront OAI
  SPACloudFrontDistributionOAICanonical:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Canonical Origin Access Identity for the Cloudfront distribution fronting the SPA Client App"
      Name: !Sub
        - '/${env}/${service}/client-app/cloudfront-distribution/canonical-oai'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt SPACloudFrontOAI.S3CanonicalUserId
      # Tag Config
      Tags:              
        Environment: !Ref 'environment'

## ::OUTPUTS::
## Outputs useful in other templates
Outputs:

  TemplateID:
    Description: 'Template id'
    Value: 'spa/s3-cfront'
  
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  # ++++++++++++++++++++++++++++++
  # Abstracted values
  # ++++++++++++++++++++++++++++++

  SPAClientAppEndpoint:
    Value: !GetAtt SPACloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-SPAClientApp-Endpoint'     

  # ++++++++++++++++++++++++++++++
  # BUCKET
  # ++++++++++++++++++++++++++++++

  SPABucket:
    Value: !Ref SPABucket
    Export:
      Name: !Sub '${AWS::StackName}-SPABucket-Name'
      
  SPABucketArn:
    Value: !GetAtt SPABucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SPABucket-ARN'

  SPABucketDomainName:
    Value: !GetAtt SPABucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-SPABucket-DomainName'

  SPABucketWebUrl:
    Value: !GetAtt SPABucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-SPABucket-WebsiteURL'      

  # ++++++++++++++++++++++++++++++
  # CLOUDFRONT DISTRIBUTION
  # ++++++++++++++++++++++++++++++      

  SPACloudFrontDistribution:
    Value: !Ref SPACloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-SPACloudFrontDistribution-ID'  

  SPACloudFrontDistributionDomainName:
    Value: !GetAtt SPACloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-SPACloudFrontDistribution-DomainName'     

  SPACloudFrontOAI:
    Value: !Ref SPACloudFrontOAI
    Export:
      Name: !Sub '${AWS::StackName}-SPACloudFrontOAI'    

  SPACloudFrontOAICanonical:
    Value: !GetAtt SPACloudFrontOAI.S3CanonicalUserId
    Export:
      Name: !Sub '${AWS::StackName}-SPACloudFrontOAI-Canonical' 
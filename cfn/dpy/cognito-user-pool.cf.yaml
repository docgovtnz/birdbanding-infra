---
## This template creates a Cognito User Pool for application authn/z

AWSTemplateFormatVersion: '2010-09-09'
Description: 'DOC Cognito User Management Stack'

## ::METADATA::
## CloudFormation parameter UI definitions
Metadata:
  AWS::CloudFormation::Interface:

    # GROUPS
    ParameterGroups:
    - Label:
        default: 'General Parameters'
      Parameters:
        - environment
        - serviceName
    - Label:
        default: "Network Configuration"
      Parameters:
        - referenceACMCertArn
        - referenceAppEndpoint
        - referenceEndpoint
    - Label:
        default: 'Identity Provider Parameters'
      Parameters:
        - samlMetadataDocument
        - samlProviderName
        - samlProviderIdentifier
    - Label:
        default: 'Custom Resource Management'
      Parameters:
        - referenceUserPoolIdpManagementArn
    - Label:
        default: 'Cogntio Email Configuration'
      Parameters:
        - referenceCognitoEmailSendingAccountAddress
        - referenceCognitoEmailSendingAccountArn
        - referenceCognitoCustomDomain
    - Label:
        default: 'Cogntio Lambda Trigger Configuration'
      Parameters:
        - referencePostAuthenticationLambdaArn
    - Label:
        default: 'Cloudfront distribution for separate GIS environment'
      Parameters:
        - referenceGisCloudfrontDomain
    # LABELS
    ParameterLabels:

      # General Parameters
      environment:
        default: 'Operational environment'
      serviceName:
        default: 'Service name'

      # Network Parameters
      referenceACMCertArn:
        default: "ARN of Domain Certificate provided by ACM:"
      referenceAppEndpoint:
        default: "Endpoint of the main client application (with the app prefix):"
      referenceEndpoint:
        default: "Endpoint of the main client application (without the app prefix):"

      # Identity Provider Parameters
      samlMetadataDocument:
        default: 'SAML Idp Metadata Certificate'
      samlProviderName:
        default: 'SAML Idp Name'
      samlProviderIdentifier:
        default: 'SAML Idp Identifier'

      # Custom Resource Management
      referenceUserPoolIdpManagementArn:
        default: 'ARN of the Custom Resource Management Function for User Pool Identity Providers'

      # Cognito Email Configuration
      referenceCognitoEmailSendingAccountArn:
        default: 'Address of the verified SES email account used for the User Pool'
      referenceCognitoEmailSendingAccountArn:
        default: 'ARN of the verified SES email account used for the User Pool'

      # Cognito Lambda Trigger Configuration
      referencePostAuthenticationLambdaArn:
        default: 'ARN of the PostAuthentication Lambda Function for the User Pool'

      # Cloudfront distribution domain for an isolated environment to include in the Exampleelopment Cognito User Pool
      referenceGisCloudfrontDomain:
        default: 'Domain for the Cloudfront distribution to integrate into the Exampleelopment environment'

## ::PARAMETERS::
Parameters:

  # General Parameters
  environment:
    Type: String
    ConstraintDescription: 'Operational environment'
    AllowedValues:
    - 'Example'
    Default: 'Example'

  serviceName:
    Type: String
    Default: 'unknown-service'

  # Network Configuration

  referenceACMCertArn:
    # Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: 'ARN of the SSL Certificate managing this deployment'

  referenceAppEndpoint:
    Type: 'AWS::SSM::Parameter::Value<String>'  
    Description: "Must be an SSM parameter."

  referenceEndpoint:
    Type: 'AWS::SSM::Parameter::Value<String>'  
    Description: "Must be an SSM parameter."

  # Identity Provider Parameters
  samlMetadataDocument:
    Type: String
    Description: 'The XML metadata document to use when trusting the SAML Identity Provider'
    Default: 'https://example.org/FederationMetadata/2007-06/FederationMetadata.xml'

  samlProviderName:
    Type: String
    Description: 'The name for your SAML provider in Cognito'
    Default: 'Conservation-Active-Directory'

  samlProviderIdentifier:
    Type: String
    Description: 'The identifier of your SAML provider in Cognito'
    Default: 'conservation-active-directory'

  # Custom Resource Management
  referenceUserPoolIdpManagementArn:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Description: 'Must exist in the SSM parameter store'

  # Cognito Email Configuration
  referenceCognitoEmailSendingAccountAddress:
    Type: String
    Description: '(Optional) This is the email address for the SES email account to be used with Cognito'
    Default: ''
  
  referenceCognitoEmailSendingAccountArn:
    Type: String
    Description: '(Optional) This is the ARN for the SES email account to be used with Cognito'
    Default: ''

  referenceCognitoCustomDomain:
    Type: String
    Description: '(Optional) This is the custom domain for the UAT/PROD environments'

  # Cognito Lambda Trigger Configuration
  referencePostAuthenticationLambdaArn:
    Type: String
    Description: '(Optional) This is the ARN for a Post Authentication Lambda function'
    Default: ''

  # Cloudfront distribution domain for an isolated environment to include in the Exampleelopment Cognito User Pool
  referenceGisCloudfrontDomain:
    Type: String
    Description: '(Optional) This is the domain used for a separate cloudfront distribution in the Example environment'
    Default: ''

## ::CONDITIONS::
Conditions:
  IsExampleEnv: !Equals [!Ref environment, 'Example' ]
  IsNotExampleEnv: !Not [!Equals [ !Ref environment, 'Example' ]]
  IsNotProdEnv: !Not [!Equals [ !Ref environment, 'Prod' ]]
  IsExampleOrTestEnv: !Or [!Equals [ !Ref environment, 'Example' ], !Equals [ !Ref environment, 'Test' ]]
  CreateCognitoPostAuthenticationTrigger: !Not [!Equals [ !Ref referencePostAuthenticationLambdaArn, '' ]]
  CreateAdditionalExampleCognitoClientForCloudFront: !Not [!Equals [ !Ref referenceGisCloudfrontDomain, '' ]]
  IsExampleEnvAndCreateAdditionalCognitoClient: !And
    - !Condition IsExampleEnv
    - !Condition CreateAdditionalExampleCognitoClientForCloudFront

## ::MAPPINGS::  
Mappings:
  # Environment-Specific Config
  EnvConfig:
    Example:
      EnvToLower: 'example'
      AccountPrefix: 'exampleprefix'
      DomainPrefix: 'example.'

## ::RESOURCES::
Resources:

  # Creates a user pool in cognito for your app to auth against
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub 
        - "${env}-${service}-user-pool"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }
      MfaConfiguration: "OFF"
      Schema:
        # Identifiers
        - Name: name
          AttributeDataType: 'String'
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: 'String'
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: 'String'
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: 'String'  
          Mutable: true
          Required: true

        # Required

        # Optional
        - Name: nickname
          AttributeDataType: 'String'
          Mutable: true
          Required: false  
        - Name: address
          AttributeDataType: 'String'
          Mutable: true
          Required: false
        - Name: phone_number
          AttributeDataType: 'String'
          Mutable: true
          Required: false
        # Why is birthdate a string and not datetime or number??? Thanks AWS.
        - Name: birthdate
          AttributeDataType: 'String'
          Mutable: true
          Required: false  

      Policies:
          PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireSymbols: true
              RequireUppercase: true
      # Only we can create users - they can't sign themselves up.
      AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate:
            EmailSubject: !Sub "FALCON User Sign-Up Invitation"
            EmailMessage:
              !Sub 
                - |
                  <p>You are invited to join the FALCON user group! Your temporary credentials are:</p>
                  <p>
                  Username: <strong>{username}</strong><br />
                  Password: <strong>{####}</strong>
                  </p>
                  <p>
                  Please visit the following page and click 'Login' to sign-in using your username and password: <br />
                  https://app.${env}${service}.example.org
                  </p>
                - { 
                    env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
                    service: !Ref serviceName
                  }
      EmailConfiguration:
        EmailSendingAccount: 'Example'
        From: !Ref referenceCognitoEmailSendingAccountAddress
        ReplyToEmailAddress: !Ref referenceCognitoEmailSendingAccountAddress
        SourceArn: !Ref referenceCognitoEmailSendingAccountArn
      # Enable sign-in via email address as well as username
      # Much easier for users to remember.
      # Add a post-authentication trigger to confirm users
      LambdaConfig:
        PostAuthentication: !If [CreateCognitoPostAuthenticationTrigger, !Ref referencePostAuthenticationLambdaArn, !Ref "AWS::NoValue"]
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
        

  # User Pool Groups - these only really make sense if we're managing
  # Access via User Pool Group memberhsip, i.e. Type = Token

  # Read-Only Group
  UserPoolReadOnlyGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: !Sub 'Group for read-only access to ${serviceName} service resources'
      GroupName: !Sub 
        - '${env}-${service}-read-only-group'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }
      Precedence: 40
      UserPoolId: !Ref 'UserPool'

  # User Group
  UserPoolUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: !Sub 'Group for general user access to ${serviceName} service resources'
      GroupName: !Sub 
        - '${env}-${service}-user-group'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }
      Precedence: 30
      UserPoolId: !Ref 'UserPool'

  # Manager Group
  UserPoolManagerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: !Sub 'Group for manager access to ${serviceName} service resources'
      GroupName: !Sub 
        - '${env}-${service}-manager-group'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }
      Precedence: 20
      UserPoolId: !Ref 'UserPool'

  # Admin Group
  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: !Sub 'Group for administrator access to ${serviceName} service resources'
      GroupName: !Sub 
        - '${env}-${service}-admin-group'
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName
          }
      Precedence: 10
      UserPoolId: !Ref 'UserPool'


  # CUSTOM RESOURCES

  # Unbelievably, Cloudformation still doesn't support some of the core cognito
  # bits and pieces natively, and those it does support, it doesn't support fully
  # (i.e. some of the configuration options are not available in CFN)
  # Each of these Cognito resources are therefore Lambda-backed Custom resources,
  # Where the Lambda functions are defined elsewhere.

  # SAML Identity Provider (i.e. DOC's Active Directory)
  # SAMLIdp:
  #   Type: Custom::SAMLIdpManagementFunction
  #   Properties:
  #     ServiceToken: !Ref "referenceUserPoolIdpManagementArn"
  #     Region: !Ref "AWS::Region"
  #     Metadata: !Ref samlMetadataDocument
  #     Name: !Ref samlProviderName
  #     UserPoolId: !Ref UserPool
  #     IdpIdentifier: !Ref samlProviderIdentifier

  # User Pool Client Application
  UserPoolMainClient:
    # DependsOn: SAMLIdp
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Join
      - '-'
      - - !FindInMap [ EnvConfig, !Ref environment, EnvToLower ] 
        - !Ref serviceName
        - 'manager-app'
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        # - !Sub '${samlProviderName}'
        - COGNITO
      AllowedOAuthFlows: 
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - openid
        - profile
      CallbackURLs: 
        - !Sub 'https://${referenceAppEndpoint}/login'
        - !Sub 'https://${referenceEndpoint}/login'
      LogoutURLs:
        - !Sub 'https://${referenceAppEndpoint}'
        - !Sub 'https://${referenceEndpoint}'
      GenerateSecret: false

  # User Pool Localhost Client for Exampleelopment
  UserPoolLocalhostClient:
    # DependsOn: SAMLIdp
    Type: AWS::Cognito::UserPoolClient
    Condition: IsNotProdEnv
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Join
      - '-'
      - - !FindInMap [ EnvConfig, !Ref environment, EnvToLower ] 
        - !Ref serviceName
        - 'localhost-client'
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      SupportedIdentityProviders:
        # - !Sub '${samlProviderName}'
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - profile
      CallbackURLs: 
        - 'http://localhost:4200/login'
      LogoutURLs: 
        - 'http://localhost:4200'
      GenerateSecret: false

# User Pool GIS Client for Exampleelopment ONLY
  UserPoolGISClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: IsExampleEnvAndCreateAdditionalCognitoClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Join
      - '-'
      - - !FindInMap [ EnvConfig, !Ref environment, EnvToLower ] 
        - !Ref serviceName
        - 'gis-client'
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - profile
      CallbackURLs: 
        - !Sub 'https://${referenceGisCloudfrontDomain}/login'
      LogoutURLs: 
        - !Sub 'https://${referenceGisCloudfrontDomain}'
      GenerateSecret: false

  # # User Pool UI Customization
  UserPoolUICustomizationExampleTest: 
    Type: AWS::Cognito::UserPoolUICustomizationAttachment 
    Condition: IsExampleOrTestEnv
    DependsOn: UserPoolDomainDefault
    Properties: 
      UserPoolId: !Ref UserPool
      ClientId: ALL
      CSS: ".submitButton-customizable { 
        background-color: #00789A; 
      }
      .submitButton-customizable:hover {
        background-color: #005580;
      }
      .background-customizable {
        background-color: #F0F3F5;
      }
      .banner-customizable {
        background-color: #194036;
      }
      .logo-customizable {
        max-width: 99%;
      }"

    # User Pool Custom Domain
  UserPoolDomainDefault:
    Type: AWS::Cognito::UserPoolDomain
    Condition: IsExampleOrTestEnv
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub
        - 'auth-${env}-${service}'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref 'serviceName',
          }


## SSM PARAMETERS

  # User Pool ID
  UserPoolId:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: !Sub "ID of the Cognito user pool for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/id'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref 'UserPool'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment  

  # User PoolARN
  UserPoolArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: !Sub "ARN of the Cognito user pool for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'UserPool.Arn'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment  

  # User Pool Provider Name
  UserPoolProviderName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: !Sub "Provider Name of the Cognito user pool for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/provider-name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'UserPool.ProviderName'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment 

  # User Pool Main Client ID
  UserPoolMainClientId:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: !Sub "ID of the main Cognito user pool client for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/client-app-id'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref UserPoolMainClient
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment 

  # User Pool Main Client ID
  UserPoolLocalhostClientId:
    Type: AWS::SSM::Parameter
    Condition: IsNotProdEnv
    Properties: 
      Description: !Sub "ID of the localhost Cognito user pool client for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/localhost-client-id'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref UserPoolLocalhostClient
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment 

  # User Pool Main Client SignIn URL
  UserPoolMainLocalhostClientSignInUrl:
    Type: AWS::SSM::Parameter
    Condition: IsExampleOrTestEnv
    Properties: 
      Description: !Sub "Sign-In URL of the localhost Cognito user pool client for the ${serviceName} service in the ${environment} environment"
      Name: !Sub
        - '/${env}/${service}/cognito/user-pool/localhost-client/signin-url'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Sub
        - 'https://auth-${env}-${service}.auth.ap-southeast-2.amazoncognito.com/login?response_type=token&client_id=${clientId}&redirect_uri=https://${appEndpoint}'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref 'serviceName',
          region: !Ref 'AWS::Region',
          clientId: !Ref UserPoolLocalhostClient,
          appEndpoint: !Ref 'referenceAppEndpoint'
          }
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: !Ref environment

## ::OUTPUTS::
## Outputs useful in other templates, etc.
Outputs:

  TemplateID:
    Description: 'Template ID'
    Value: 'cognito/env-account'
  
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'   

  # User Pool

  UserPoolId:
    Description: "User Pool - ID"
    Value: !Ref 'UserPool'
    Export:
      Name: !Sub "${AWS::StackName}-UserPool-ID"

  UserPoolArn:
    Description: "User Pool - Arn"
    Value: !GetAtt 'UserPool.Arn'
    Export:
      Name: !Sub "${AWS::StackName}-UserPool-ARN"

  UserPoolProvider:
    Description: "User Pool - Provider Name"
    Value: !GetAtt 'UserPool.ProviderName'
    Export:
      Name: !Sub "${AWS::StackName}-UserPool-Provider-Name"      

  # # User Pool Groups

  UserPoolReadOnlyGroupName:
    Description: "User Pool Read-Only Group - Name"
    Value: !Ref 'UserPoolReadOnlyGroup'
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolReadOnlyGroup-Name"  

  UserPoolUserGroupName:
    Description: "User Pool General User Group - Name"
    Value: !Ref 'UserPoolUserGroup'
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolUserGroup-Name"

  UserPoolManagerGroupName:
    Description: "User Pool Manager Group - Name"
    Value: !Ref 'UserPoolManagerGroup'
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolManagerGroup-Name"

  UserPoolAdminGroupName:
    Description: "User Pool Admin Group - Name"
    Value: !Ref 'UserPoolAdminGroup'
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolAdminGroup-Name"

  # Identity Providers
  # SAMLIdpIdentifiers:
  #   Description: "SAML Identity Provider - Identifiers"
  #   Value: !Join [",", !GetAtt 'SAMLIdp.IdpIdentifiers']
  #   Export:
  #     Name: !Sub "${AWS::StackName}-SAMLIdp-Identifiers"  
  
  # Clients

  # Main Client
  UserPoolMainClientId:
    Description: "User Pool Main Client - ID"
    Value: !Ref UserPoolMainClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolMainClient-ClientId"

  UserPoolMainClientSignInUrl:
    Description: 'User Pool Main Client - Sign-In URL'
    Value: !Sub
      - 'https://auth.${env}${service}.example.org/login?response_type=token&client_id=${clientId}&redirect_uri=https://${appEndpoint}'
      - {
          env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
          service: !Ref 'serviceName',
          region: !Ref 'AWS::Region',
          clientId: !Ref UserPoolMainClient,
          appEndpoint: !Ref 'referenceAppEndpoint'
        }

  # Localhost Client
  UserPoolLocalhostClientId:
    Description: "User Pool Localhost Client - ID"
    Condition: IsNotProdEnv
    Value: !Ref UserPoolLocalhostClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolLocalhostClient-ClientId"

  UserPoolLocalhostClientSignInUrl:
    Description: 'User Pool Localhost Client - Sign-In URL'
    Condition: IsNotProdEnv
    Value: !Sub
      - 'https://auth.${env}${service}.example.org/login?response_type=token&client_id=${clientId}&redirect_uri=https://${appEndpoint}'
      - {
          env: !FindInMap [ EnvConfig, !Ref environment, DomainPrefix ],
          service: !Ref 'serviceName',
          region: !Ref 'AWS::Region',
          clientId: !Ref UserPoolLocalhostClient,
          appEndpoint: !Ref 'referenceAppEndpoint'
        }

---
# This template creates a postgreSQL Aurora database cluster with a rotating key

AWSTemplateFormatVersion: '2010-09-09'
Description: 'DOC Data Service Template - CI/CD Resources for Environment accounts'

## ::METADATA::
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    #---------------
    - Label:
        default: 'General Parameters'
      Parameters:
        - environment
        - serviceName

    - Label:
        default: 'Tools Account Etc.'
      Parameters:
        - toolsAccountNumber
        - artifactBucketName
        - cmkArn

    - Label: 
        default: "Optional Configuration"
      Parameters:
        - lambdaLayersSourceDir
        - lambdaDataLakeIntegrationSourceDir
        - includeInfraDeployment
        - includeClientDeployment
        - refSSMParamDocumentationBucketName

    # LABELS
    ParameterLabels:
    #---------------
      # General Parameters

      serviceName:
        default: "Data Service name:"
      environment:
        default: "Environment:"

      # Tools Account

      toolsAccountNumber:
        default: "Tools Account Number:"
      artifactBucketName:
        default: "CodePipeline artifact bucket name:"
      cmkArn:
        default: "KMS Key ARN:"

      # Optional CI/CD Configuration

      lambdaLayersSourceDir:
        default: "(Optional) Lambda layers source directory:"
      lambdaDataLakeIntegrationSourceDir:
        default: "(Optional) Lambda datalake integration source directory:"
      includeInfraDeployment:
        default: "Create infrastructure / cloudformation resources?"
      includeClientDeployment:
        default: "Create client app resources?"
      refSSMParamDocumentationBucketName:
        default: "(Optional) SSM Parameter documentation bucket name?"

## ::PARAMETERS::
Parameters:

  # General Parameters

  serviceName:
    Type: String
    ConstraintDescription: "Must be between 3 - 32 characters long."
    AllowedPattern: "^[A-Za-z0-9]{3,32}$"
    MinLength: 4
    MaxLength: 32
    Default: "unknowndataservice"

  environment:
    Type: String
    AllowedValues:
    - "Example"
    Default: "Example"

  # Tools Account

  toolsAccountNumber:
    Description: AWS AccountNumber for tools account
    Type: Number
    Default: 252379044400

  artifactBucketName:
    Description: S3 Bucket in Tools Account, which holds the artifacts built by CodePipeline
    Type: String

  cmkArn:
    Description: ARN of the KMS CMK creates in Tools account
    Type: String

  # OPtional CI/CD Configuration

  lambdaLayersSourceDir:
    Type: String
    Default: ''
    Description: "If your service includes lambda layers, this is the directory of the buildspec.yml file. If not, leave blank."

  lambdaDataLakeIntegrationSourceDir:
    Type: String
    Default: ''
    Description: "If your service includes integration with the datalake, this is the directory of the buildspec.yml file. If not, leave blank."

  includeInfraDeployment: 
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
    Description: "If we're managing infrastructure/cloudformation CI/CD here, select true. Otherwise, false."

  includeClientDeployment: 
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
    Description: "If we're managing client app CI/CD here, select true. Otherwise, false."

  refSSMParamDocumentationBucketName:
    Type: 'AWS::SSM::Parameter::Value<String>'  
    Description: "Must be an SSM parameter."

## ::CONDITIONS::
Conditions:
  IsExampleEnv: !Equals [!Ref environment, 'Example' ]
  CreateLambdaLayerResources: !Not [ !Equals [ !Ref lambdaLayersSourceDir, '' ] ]
  CreateLambdaDataLakeIntegrationResources: !Not [ !Equals [ !Ref lambdaDataLakeIntegrationSourceDir, '' ] ]
  CreateInfraResources: !And [ !Condition IsExampleEnv, !Equals [!Ref includeInfraDeployment, 'true' ] ]
  CreateClientAppResources: !And [ !Condition IsExampleEnv, !Equals [!Ref includeClientDeployment, 'true' ] ]

## ::MAPPINGS::  
Mappings:
  # Environment-Specific Config
  EnvConfig:
    Example:
      EnvToLower: 'example'
      AccountPrefix: 'exampleprefix'
      AccountId: 00000000000

## ::RESOURCES::
Resources:

  # ===================================
  # ACCESS ROLES
  # ===================================

  # DATA SERVICE Developer ROLE
  # This role is an auxiliary role intended for use
  # by third-party Developers who will be Exampleeloping
  # the against the repos. The role is only created
  # in the Example account.
  ServiceDeveloperRole:
    Type: AWS::IAM::Role
    Condition: "IsExampleEnv"
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              AWS:  
                - !Ref "AWS::AccountId"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: 'Developer-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CodeCommitAccess
                Effect: Allow
                Action:
                  - codecommit:*
                Resource:

                  # Infrastructure Resources etc.
                  # Client App Resources
                  - !If 
                    - CreateInfraResources
                    - !GetAtt "InfraSourceRepo.Arn"
                    - !Ref AWS::NoValue

                  # Main Data Service Resources etc.
                  - !GetAtt "DataServiceSourceRepo.Arn"

                  # Client App Resources
                  - !If 
                    - CreateClientAppResources
                    - !GetAtt "ClientAppSourceRepo.Arn"
                    - !Ref AWS::NoValue

              - Sid: CloudWatchEventsCodeCommitRulesAccess
                Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:DisableRule
                  - events:EnableRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - events:ListTargetsByRule
                Resource: arn:aws:events:*:*:rule/codecommit*
              - Sid: SNSTopicAndSubscriptionAccess
                Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:SetTopicAttributes
                Resource: arn:aws:sns:*:*:codecommit*
              - Sid: SNSTopicAndSubscriptionReadAccess
                Effect: Allow
                Action:
                  - sns:ListTopics
                  - sns:ListSubscriptionsByTopic
                  - sns:GetTopicAttributes
                Resource: "*"
              - Sid: LambdaReadOnlyListAccess
                Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: "*"
              - Sid: IAMReadOnlyListAccess
                Effect: Allow
                Action:
                  - iam:ListUsers
                Resource: "*"
              - Sid: IAMReadOnlyConsoleAccess
                Effect: Allow
                Action:
                  - iam:ListAccessKeys
                  - iam:ListSSHPublicKeys
                  - iam:ListServiceSpecificCredentials
                  - iam:ListAccessKeys
                  - iam:GetSSHPublicKey
                Resource: arn:aws:iam::*:user/${aws:username}
              - Sid: IAMUserSSHKeys
                Effect: Allow
                Action:
                  - iam:DeleteSSHPublicKey
                  - iam:GetSSHPublicKey
                  - iam:ListSSHPublicKeys
                  - iam:UpdateSSHPublicKey
                  - iam:UploadSSHPublicKey
                Resource: arn:aws:iam::*:user/${aws:username}
              - Sid: IAMSelfManageServiceSpecificCredentials
                Effect: Allow
                Action:
                  - iam:CreateServiceSpecificCredential
                  - iam:UpdateServiceSpecificCredential
                  - iam:DeleteServiceSpecificCredential
                  - iam:ResetServiceSpecificCredential
                Resource: arn:aws:iam::*:user/${aws:username}

  # Source Access Cross Account Role
  # This role is primarily assumed by CodePipeline 
  # to enable access to the various repositories in this account.
  SourceAccessCrossAccountRole:
    Type: AWS::IAM::Role
    Condition: "IsExampleEnv"
    Properties:
      RoleName: !Sub 
        - "${env}-${service}-service-xa-sourceaccess"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref toolsAccountNumber
            Action:
              - sts:AssumeRole

  # Source Access Cross Account Role Policy
  SourceAccessCrossAccountPolicy:
    Type: AWS::IAM::Policy
    Condition: "IsExampleEnv"
    Properties:
      PolicyName: !Sub ToolsAcctCodePipelineCodeCommitPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - codecommit:BatchGetRepositories
              - codecommit:Get*
              - codecommit:GitPull
              - codecommit:List*
              - codecommit:CancelUploadArchive
              - codecommit:UploadArchive
            Resource:
              # Infrastructure Resources etc.
              - !If 
                - CreateInfraResources
                - !GetAtt "InfraSourceRepo.Arn"
                - !Ref AWS::NoValue

              # Main Data Service Resources etc.
              - !GetAtt "DataServiceSourceRepo.Arn"

              # Client App Resources
              - !If 
                - CreateClientAppResources
                - !GetAtt "ClientAppSourceRepo.Arn"
                - !Ref AWS::NoValue
          - Effect: Allow
            Action: 
              - s3:*
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:*
            Resource: !Ref cmkArn
      Roles:
        - !Ref SourceAccessCrossAccountRole

  # Infrastructure Management Role
  InfraManagementCrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - "${env}-${service}-service-xa-inframgmt"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }      
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref toolsAccountNumber
            Action:
              - sts:AssumeRole

  InfraManagementCrossAccountPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub CrossAccountInfraManagementPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudformation:*
              - s3:*
              - iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:*
            Resource: !Ref cmkArn
      Roles:
        - !Ref InfraManagementCrossAccountRole

  # Infrastructure Deployment Role
  InfraDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${env}-${service}-service-xa-infradeployment"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }            
      Path: /      
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole

  InfraDeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub cloudformationdeployer-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:AddPermission
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:InvokeFunction
              - lambda:RemovePermission
              - lambda:UpdateFunctionCode
              - lambda:GetFunctionConfiguration
              - lambda:GetFunction
              - lambda:UpdateFunctionConfiguration
              - lambda:*Layer*  # Manage those layers
              - events:* # Required for the sample lambda function to work
              - iam:CreateRole
              - iam:CreatePolicy              
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:PassRole
              - iam:DeleteRolePolicy
              - iam:GetRole     
              - iam:GetRolePolicy
              - iam:Attach*
              - iam:Detach*
              - iam:GetServerCertificate
              - iam:ListServerCertificates
              - iam:UpdateServerCertificate              
              - cloudformation:*
            Resource: "*"
            # General Actions. Should reduce these!
          - Effect: Allow
            Action:
              - route53:*
              - ec2:*
              - rds:*
              - dynamodb:*
              - kms:*
              - secretsmanager:*
              - cloudfront:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - sqs:*
              - acm:*
            Resource: "*"              
            # SSM (Parameters)
          - Effect: Allow
            Action:
              - ssm:Get*
              - ssm:List*
              - ssm:*Parameter*
              - ssm:*Tag*
            Resource: "*"           
            # Cognito Actions
          - Effect: Allow
            Action:
              - cognito:*
              - cognito-idp:*
              - cognito-identity:*
              - cognito-sync:*
            Resource: "*"
          - Effect: Allow
            Action:
              - waf:GetWebAcl
              - wafv2:GetWebAcl
            Resource: "*"            
            # Application Autoscaling for Dynamo
          - Effect: Allow
            Action:
              - application-autoscaling:*
            Resource: "*"            
            # S3 Actions           
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
            Resource:
             - !Sub arn:aws:s3:::${artifactBucketName}/*
             - !Sub arn:aws:s3:::${artifactBucketName}
      Roles:
        - !Ref InfraDeploymentRole

  # CodeBuild Cross Account Role
  # This role is primarily assumed by CodePipeline 
  # to execute the builds in this account
  CodeBuildCrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - "${env}-${service}-service-xa-codebuild"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref toolsAccountNumber
            Action:
              - sts:AssumeRole

  # CodeBuild Cross Account Role Policy
  CodeBuildCrossAccountPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub CrossAccountCodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - codebuild:*
              - s3:*
              - iam:PassRole
            Resource: "*"          
          - Effect: Allow
            Action:
              - kms:*
            Resource: !Ref cmkArn
      Roles:
        - !Ref CodeBuildCrossAccountRole

  # CODEBUILD ROLE
  # This role is used by the CodeBuild project to perform
  # the Build actions.
  # The role must have all permissions associated with it
  # in order to perform those actions.
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub 
        - "${env}-${service}-service-codebuild-execution"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }      
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      # ManagedPolicyArns:
      #   - "arn:aws:iam::aws:policy/AdministratorAccess" # For serverless deployment
      Policies:
        - PolicyName: 'build-policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogAccess
                Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              # Access Pipeline Artifact Bucket
              # NOTE: This relies on a strong naming convention
              - Sid: S3ArtifactAccess
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket            
                Resource:
                  - !Sub arn:aws:s3:::${artifactBucketName}/*
                  - !Sub arn:aws:s3:::${artifactBucketName}
              - Sid: SSMAccess
                Effect: Allow
                Action: 
                  - ssm:*Parameter*
                  - ssm:Get*
                  - ssm:List*
                  - ssm:AddTagsToResource
                Resource: "*"            
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:*
                Resource: !Ref cmkArn
              - Sid: DynamoStatement
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub 
                    - "arn:aws:dynamodb:${region}:${acc}:table/${env}-${service}*"
                    - { 
                        acc: !FindInMap [ EnvConfig, !Ref environment, AccountId ],
                        env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
                        service: !Ref serviceName,
                        region: !Ref "AWS::Region"
                      }
                  - !Sub 
                    - "arn:aws:dynamodb:${region}:${acc}:table/${env}-doc-datalake*"
                    - { 
                        acc: !FindInMap [ EnvConfig, !Ref environment, AccountId ],
                        env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
                        region: !Ref "AWS::Region"
                      }    
                  - !Sub 
                    - "arn:aws:dynamodb:${region}:${acc}:table/${env}-doc-schema-definitions"
                    - { 
                        acc: !FindInMap [ EnvConfig, !Ref environment, AccountId ],
                        env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
                        region: !Ref "AWS::Region"
                      }                                            
              - Sid: ServerlessStatement
                # Serverless framework documentation recommends adding the Admin Access
                # managed policy, but I'm a bit wary of that, hence this statement.
                Effect: Allow
                Action:
                  - codebuild:*
                  - s3:*
                  - cloudformation:*
                  - logs:*
                  - iam:*
                  - apigateway:*
                  - lambda:*
                  - ec2:*
                  - events:*
                  - sqs:*
                  - xray:*
                Resource: "*"            

  # ===================================
  # CODE REPOSITORIES
  # ===================================

  # Local CodeCommit Source - Infrastructure and CloudFormation
  InfraSourceRepo:
    Type: "AWS::CodeCommit::Repository"
    Condition: "CreateInfraResources"
    Properties: 
      RepositoryDescription: !Sub "Source code repository for ${serviceName} infrastructure"
      RepositoryName: !Sub "doc-${serviceName}-infra"

  # Local CodeCommit Source - Data Service
  DataServiceSourceRepo:
    Type: "AWS::CodeCommit::Repository"
    Condition: "IsExampleEnv"
    Properties: 
      RepositoryDescription: !Sub "Source code repository for ${serviceName} data service"
      RepositoryName: !Sub "doc-${serviceName}-source"

  # Local CodeCommit Source - Client App
  ClientAppSourceRepo:
    Type: "AWS::CodeCommit::Repository"
    Condition: "CreateClientAppResources"
    Properties: 
      RepositoryDescription: !Sub "Source code repository for ${serviceName} client application"
      RepositoryName: !Sub "doc-${serviceName}-client"

  # ===================================
  # CODEBUILD PROJECTS
  # ===================================

  # Service Layers Build
  DataServiceLayersBuild:
    Type: "AWS::CodeBuild::Project"
    Condition: CreateLambdaLayerResources
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref cmkArn
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Sub "${lambdaLayersSourceDir}/buildspec.yml"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: !Ref environment
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref artifactBucketName
          - Name: SOURCE_DIR
            Value: !Ref lambdaLayersSourceDir
          - Name: SERVICE_NAME
            Value: !Ref serviceName
          - Name: LAYER_RUNTIME_STEM
            Value: "nodejs"                       
          - Name: KMS_KEY
            Value: !Ref cmkArn
      Name: !Sub 
        - "${env}-${service}-service-layers-build"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      ServiceRole: !GetAtt "CodeBuildServiceRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref environment

  # Service Datalake Integration Build
  DataServiceDataLakeIntegrationBuild:
    Type: "AWS::CodeBuild::Project"
    Condition: CreateLambdaDataLakeIntegrationResources
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref cmkArn
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Sub "${lambdaDataLakeIntegrationSourceDir}/buildspec.yml"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: !Ref environment
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref artifactBucketName
          - Name: SOURCE_DIR
            Value: !Ref lambdaDataLakeIntegrationSourceDir
          - Name: SERVICE_NAME
            Value: !Ref serviceName
          - Name: LAYER_RUNTIME_STEM
            Value: "nodejs"                       
          - Name: KMS_KEY
            Value: !Ref cmkArn
      Name: !Sub 
        - "${env}-${service}-service-datalake-integration-build"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      ServiceRole: !GetAtt "CodeBuildServiceRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref environment

  # Service Datalake Integration Configuration Build
  DataServiceDataLakeIntegrationConfigBuild:
    Type: "AWS::CodeBuild::Project"
    Condition: CreateLambdaDataLakeIntegrationResources
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref cmkArn
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Sub "${lambdaDataLakeIntegrationSourceDir}/config-buildspec.yml"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: !Ref environment
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref artifactBucketName
          - Name: SOURCE_DIR
            Value: !Ref lambdaDataLakeIntegrationSourceDir
          - Name: SERVICE_NAME
            Value: !Ref serviceName
          - Name: LAYER_RUNTIME_STEM
            Value: "nodejs"                       
          - Name: KMS_KEY
            Value: !Ref cmkArn
      Name: !Sub 
        - "${env}-${service}-service-datalake-integration-config-build"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      ServiceRole: !GetAtt "CodeBuildServiceRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref environment

  # Main Service Build
  DataServiceBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref cmkArn
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "src/api/buildspec.yml"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: !Ref environment
          - Name: DEPLOYMENT_BUCKET
            Value: !Sub 
            - "doc-serverlessdeploymentbucket-${env}"
            - { 
                env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ] 
              }   
          - Name: SOURCE_DIR
            Value: 'src/api'
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: KMS_KEY
            Value: !Ref cmkArn
          - Name: DOCUMENTATION_BUCKET_NAME
            Value: !Ref refSSMParamDocumentationBucketName
      Name: !Sub 
        - "${env}-${service}-service-build"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      ServiceRole: !GetAtt "CodeBuildServiceRole.Arn"
      TimeoutInMinutes: 20
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref environment

  # Client App
  ClientAppBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref cmkArn
      Source:
        Type: "CODEPIPELINE"        
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: !Ref environment
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: KMS_KEY
            Value: !Ref cmkArn
      Name: !Sub 
        - "${env}-${service}-client-app-build"
        - { 
            env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
            service: !Ref serviceName  
          }
      ServiceRole: !GetAtt "CodeBuildServiceRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: !Ref environment

## ::PARAMETERS::
Outputs:

  TemplateID:
    Description: 'Template ID'
    Value: 'cicd/env-account'
  
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  # ACCESS ROLES

  # Service Developer Role
  ServiceDeveloperRole:
    Condition: "CreateInfraResources"
    Description: 'Data service Developer role - Name'
    Value: !Ref InfraSourceRepo
    Export:
      Name: !Sub "${AWS::StackName}-ServiceDeveloperRole-Name"

  ServiceDeveloperRoleARN:
    Condition: "CreateInfraResources"
    Description: 'Data service Developer role - ARN'
    Value: !GetAtt InfraSourceRepo.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ServiceDeveloperRole-ARN"

  # Service Developer Role
  SourceAccessCrossAccountRole:
    Condition: "IsExampleEnv"
    Description: 'Data service source access cross-account role - Name'
    Value: !Ref SourceAccessCrossAccountRole
    Export:
      Name: !Sub "${AWS::StackName}-SourceAccessCrossAccountRole-Name"

  SourceAccessCrossAccountRoleARN:
    Condition: "IsExampleEnv"
    Description: 'Data service source access cross-account role - ARN'
    Value: !GetAtt SourceAccessCrossAccountRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SourceAccessCrossAccountRole-ARN"

  # Infrastructure Management Role
  InfraManagementCrossAccountRole:
    Description: 'Data service infrastructure management cross-account role - Name'
    Value: !Ref InfraManagementCrossAccountRole
    Export:
      Name: !Sub "${AWS::StackName}-InfraManagementCrossAccountRole-Name"

  InfraManagementCrossAccountRoleARN:
    Description: 'Data service infrastructure management cross-account role - ARN'
    Value: !GetAtt InfraManagementCrossAccountRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InfraManagementCrossAccountRole-ARN"

  # Infrastructure Deployment Role
  InfraDeploymentRole:
    Description: 'Data service infrastructure deployment role - Name'
    Value: !Ref InfraDeploymentRole
    Export:
      Name: !Sub "${AWS::StackName}-InfraDeploymentRole-Name"

  InfraDeploymentRoleARN:
    Description: 'Data service infrastructure deployment role - ARN'
    Value: !GetAtt InfraDeploymentRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InfraDeploymentRole-ARN"

  # CodeBuild Role
  CodeBuildCrossAccountRole:
    Description: 'Data service CodeBuild cross-account role - Name'
    Value: !Ref CodeBuildCrossAccountRole
    Export:
      Name: !Sub "${AWS::StackName}-CodeBuildCrossAccountRole-Name"

  CodeBuildCrossAccountRoleARN:
    Description: 'Data service CodeBuild cross-account role - ARN'
    Value: !GetAtt CodeBuildCrossAccountRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeBuildCrossAccountRole-ARN"

  # CODE REPOSITORIES

  # Infra Source
  InfraSourceRepo:
    Condition: "CreateInfraResources" 
    Description: 'Data service source code repository- Name'
    Value: !GetAtt InfraSourceRepo.Name
    Export:
      Name: !Sub "${AWS::StackName}-InfraSourceRepo-Name"

  InfraSourceRepoARN:
    Condition: "CreateInfraResources" 
    Description: 'Data service source code repository - ARN'
    Value: !GetAtt InfraSourceRepo.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InfraSourceRepo-ARN"

  InfraSourceRepoHTTPURL:
    Condition: "CreateInfraResources" 
    Description: 'Data service source code repository - HTTP URL'
    Value: !GetAtt InfraSourceRepo.CloneUrlHttp
    Export:
      Name: !Sub "${AWS::StackName}-InfraSourceRepo-HTTPURL"

  # Main Service Source
  DataServiceSourceRepo:
    Condition: "IsExampleEnv" 
    Description: 'Data service source code repository - Name'
    Value: !GetAtt DataServiceSourceRepo.Name
    Export:
      Name: !Sub "${AWS::StackName}-DataServiceSourceRepo-Name"

  DataServiceSourceRepoARN:
    Condition: "IsExampleEnv" 
    Description: 'Data service source code repository - ARN'
    Value: !GetAtt DataServiceSourceRepo.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DataServiceSourceRepo-ARN"

  DataServiceSourceRepoHTTPURL:
    Condition: "IsExampleEnv" 
    Description: 'Data service source code repository - HTTP URL'
    Value: !GetAtt DataServiceSourceRepo.CloneUrlHttp
    Export:
      Name: !Sub "${AWS::StackName}-DataServiceSourceRepo-HTTPURL"

  # Client App Source
  ClientAppSourceRepo:
    Condition: "CreateClientAppResources"             
    Description: 'Data service source code repository - Name'
    Value: !GetAtt ClientAppSourceRepo.Name
    Export:
      Name: !Sub "${AWS::StackName}-ClientAppSourceRepo-Name"

  ClientAppSourceRepoARN:
    Condition: "CreateClientAppResources"
    Description: 'Data service source code repository - ARN'
    Value: !GetAtt ClientAppSourceRepo.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClientAppSourceRepo-ARN"

  ClientAppSourceRepoHTTPURL:
    Condition: "CreateClientAppResources"
    Description: 'Data service source code repository - HTTP URL'
    Value: !GetAtt ClientAppSourceRepo.CloneUrlHttp
    Export:
      Name: !Sub "${AWS::StackName}-ClientAppSourceRepo-HTTPURL"

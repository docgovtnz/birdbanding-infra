---
## This template creates code management resources

AWSTemplateFormatVersion: '2010-09-09'
Description: 'DOC Data Service Template - Code Management'

## ::METADATA::
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
    #---------------
      - Label: 
          default: "General Configuration"
        Parameters:
          - serviceName
          - exampleAccountNumber
      - Label: 
          default: "Infrastructure CI/CD Configuration"
        Parameters:
          - referenceInfraSourceRepoName
          - infraSourceRepoTriggerBranchName
          - referenceCFNValidationFunctionnName
      - Label: 
          default: "Main Data Service CI/CD Configuration"
        Parameters:
          - referenceServiceSourceRepoName
          - serviceSourceRepoTriggerBranchName
          - includeLambdaLayerDeployment
          - includeDataLakeIntegration
      - Label: 
          default: "Client App CI/CD Configuration"
        Parameters:
          - referenceClientAppSourceRepoName
          - clientAppSourceRepoTriggerBranchName
      - Label: 
          default: "Testing CI/CD Configuration"
        Parameters:
          - includeKatalonDeployment
          - exampleNewmanTestSecretID
          - exampleNewmanTestClientID
      - Label:
          default: 'Cross References'
        Parameters:
          - referenceAlertStack
          - referenceArtifactBucketName
          - referenceTestingResultsBucketName
          - referenceKMSKeyArn
      - Label:
          default: 'Deployment Configuration'
        Parameters:
          - crossAccountCondition

    ParameterLabels:
    #---------------  
      # General Parameters

      serviceName:
        default: "Data Service name:"
      
      exampleAccountNumber:
        default: "Example account number:"

      # Infrastructure CI/CD Configuration

      referenceInfraSourceRepoName:
        default: "Name of Infrastructure CodeCommit repository"

      infraSourceRepoTriggerBranchName:
        default: "Name of the Infrastructure repository trigger branch"

      referenceCFNValidationFunctionnName:
        default: "Name of Cloudformation validation Lambda function"

      # Main Data Service CI/CD Configuration

      referenceServiceSourceRepoName:
        default: "Name of Main Data Service CodeCommit repository"

      serviceSourceRepoTriggerBranchName:
        default: "Name of the Main Data Service repository trigger branch"

      includeLambdaLayerDeployment:
        default: "(Optional) Create lambda layer deployment resources?" 

      # Client Application CI/CD Configuration

      referenceClientAppSourceRepoName:
        default: "Name of Client Application CodeCommit repository"

      clientAppSourceRepoTriggerBranchName:
        default: "Name of the Client App repository trigger branch"

      # Testing CI/CD Configuration

      includeKatalonDeployment:
        default: "Create Katalon Testing CI/CD resources?"

      exampleNewmanTestSecretID:
        default: "Test Secret ID (Name) for Example Newman API tests:"

      exampleNewmanTestClientID:
        default: "Test Client ID for Example Newman API tests:"

      # Cross References

      referenceAlertStack:
        default: "Notification / Alerting Stack name:"

      referenceArtifactBucketName:
        default: "Name of pipeline artifact bucket:"

      referenceTestingResultsBucketName:
        default: "Name of testing results bucket:"

      referenceKMSKeyArn:
        default: "ARN of KMS key:"

      # Deployment Parameters
      crossAccountCondition:
        default: "Create cross-account resources?"

## ::PARAMETERS::
Parameters:

  # General Parameters

  serviceName:
    Type: String
    ConstraintDescription: 'Must be between 3 - 32 characters long.'
    AllowedPattern: "^[A-Za-z0-9]{3,32}$"
    MinLength: 4
    MaxLength: 32
    Default: "unknowndataservice"

  exampleAccountNumber:
    Description: "12-digit AWS Account number for example account"
    Type: Number
    Default: 000000000

  # Infrastructure CI/CD Parameters

  referenceInfraSourceRepoName:
    Description: "Name of the source code repo containing infrastructure source"    
    Type: String
    Default: ''

  infraSourceRepoTriggerBranchName:
    Description: "Name of the branch to use to trigger pipeline executions. Defaults to 'master'"    
    Type: String
    ConstraintDescription: "Must be between 4 - 32 characters long."
    MinLength: 4
    MaxLength: 32    
    Default: "master"

  referenceCFNValidationFunctionnName:
    Description: "Required. The function must exist in the current account and region."
    Type: String
    ConstraintDescription: 'This should be simply the function name, not the full ARN'
    # AllowedPattern: "^arn:aws:lambda:[a-z]{2}-[a-z]{4,9}-[0-9]{1}:[0-9]{12}:function:[0-9]{8}-[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{12}$"
    MinLength: 3
    MaxLength: 100

  # Main Data Service CI/CD Parameters

  referenceServiceSourceRepoName:
    Description: "Name of the source code repo containing main service source"    
    Type: String
    MinLength: 4

  serviceSourceRepoTriggerBranchName:
    Description: "Name of the branch to use to trigger pipeline executions. Defaults to 'master'"    
    Type: String
    ConstraintDescription: "Must be between 4 - 32 characters long."
    MinLength: 4
    MaxLength: 32    
    Default: "master"

  includeLambdaLayerDeployment:
    Description: "Select true if the service includes lambda layers. Otherwise, false."
    Type: String    
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'

  includeDataLakeIntegration:
    Description: "Select true if the service includes standard datalake integration. Otherwise, false."
    Type: String    
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'

  # Client Application CI/CD Parameters

  referenceClientAppSourceRepoName:
    Description: "(optional) Name of the source code repo containing client application source"    
    Type: String
    Default: ''

  clientAppSourceRepoTriggerBranchName:
    Description: "Name of the branch to use to trigger pipeline executions. Defaults to 'master'"    
    Type: String
    ConstraintDescription: "Must be between 4 - 32 characters long."
    MinLength: 4
    MaxLength: 32    
    Default: "master"

  # Testing CI/CD Parameters

  includeKatalonDeployment: 
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
    Description: "If we're managing Katalon testing CI/CD here, select true. Otherwise, false."

  exampleNewmanTestSecretID:
    Type: String
    ConstraintDescription: "Must be between 4 - 256 characters long."
    MinLength: 4
    MaxLength: 256
    Default: 'example/birdbanding/automated-testing'

  exampleNewmanTestClientID:
    Type: String
    ConstraintDescription: "Must be between 4 - 256 characters long."
    MinLength: 4
    MaxLength: 256
    Default: '3ju63ugc8nl00hmi9a5kjm2ti7'
    
  # Cross References
  
  referenceAlertStack:
    Description: "(Optional) Referenced stack should be based on operations/alert.yaml template."
    Type: String
    Default: ''

  referenceArtifactBucketName:
    Description: "The bucket must already exist in this account."
    Type: String

  referenceTestingResultsBucketName:
    Description: "The bucket must already exist in this account."
    Type: String

  referenceKMSKeyArn:
    Description: "The key must already exist in this account."
    Type: String

  # Deployment Configuration

  crossAccountCondition:
    Description: "Conditionally creates the resources for cross account access"
    Type: String    
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'

## ::CONDITIONS::
Conditions:
  CreateInfraResources: !Not [ !Equals [!Ref referenceInfraSourceRepoName, '' ] ]  
  CreateClientAppResources: !Not [ !Equals [!Ref referenceClientAppSourceRepoName, '' ] ]
  CreateKatalonDeployment: !Equals [!Ref includeKatalonDeployment, 'true' ]
  CreateAlarms: !Not [ !Equals [!Ref referenceAlertStack, '' ] ]
  CreateCrossAccountResources: !Equals [ !Ref crossAccountCondition, true ]
  CreateLambdaLayerResources: !Equals [!Ref includeLambdaLayerDeployment, 'true' ]
  CreateDataLakeIntegrationResources: !Equals [!Ref includeDataLakeIntegration, 'true' ]

## ::MAPPINGS::  
Mappings:
  # Environment-Specific Config
  EnvConfig:
    Example:
      EnvToLower: 'example'
      AccountPrefix: 'exampleprefix'

## ::RESOURCES::
Resources:

  ## ----------------
  ## EXECUTION ROLES
  ## ----------------

  # CODEPIPELINE SERVICE ROLE
  # This role is used to perform the various
  # actions that form the pipeline.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${serviceName}-service-codepipeline-execution"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: 'main-codepipeline-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Access pipeline artifacts bucket
              - Resource: 
                  - !Sub "arn:aws:s3:::${referenceArtifactBucketName}"
                  - !Sub "arn:aws:s3:::${referenceArtifactBucketName}/*"
                  - !Sub "arn:aws:s3:::${referenceTestingResultsBucketName}"
                  - !Sub "arn:aws:s3:::${referenceTestingResultsBucketName}/*"                  
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Access CodeCommit repos
              - Resource:
                  # Infrastructure Resources
                  - !If
                    - CreateInfraResources
                    - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceInfraSourceRepoName}"
                    - !Ref "AWS::NoValue"                     
                  
                  - !If
                    - CreateInfraResources
                    - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceInfraSourceRepoName}"
                    - !Ref "AWS::NoValue"

                  # Data Service Source Resources     
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceServiceSourceRepoName}"
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceServiceSourceRepoName}/*"

                  # Client App Resources
                  - !If
                    - CreateClientAppResources
                    - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceClientAppSourceRepoName}"
                    - !Ref "AWS::NoValue" 

                  - !If
                    - CreateClientAppResources
                    - !Sub "arn:aws:codecommit:${AWS::Region}:${exampleAccountNumber}:${referenceClientAppSourceRepoName}/*"
                    - !Ref "AWS::NoValue"                                             
                Effect: Allow
                Action:
                  - codecommit:BatchGetRepositories
                  - codecommit:Get*
                  - codecommit:List*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
              # Allow Lambda Function invocation
              # Note: This assumes the validation function is in the same region and account!
              # If this isn't the case, we need to get more sophisticated here.
              - Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${referenceCFNValidationFunctionnName}'
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
              # CodeBuild project permissions
              - Resource:
                  # CodeBuild Projects
                  # Note: These rely on a strong naming convention.
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${exampleAccountNumber}:project/example-${serviceName}-*"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/doc-${serviceName}-api-testing-example"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/doc-${serviceName}-infra-sharing"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/doc-${serviceName}-data-service-sharing"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/doc-${serviceName}-client-sharing"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
              # Other CodeBuild permissions
              - Resource: "*"
                Effect: Allow
                Action:
                  - cloudformation:*
                  - iam:PassRole
                  - iam:ListRoles
                  - sns:Publish                  
              # KMS Key Actions
              - Resource: !Ref referenceKMSKeyArn 
                Effect: Allow
                Action:
                  - kms:Decrypt
              # Assume Cross Account Roles
              # This relies on a strong naming convention!!
              - Resource:

                  # Main Source

                  # Source Access
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-sourceaccess"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }

                  # CodeBuild

                  # Example
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-codebuild"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                      
                  # Infrastructure Resources

                  # Example
                  - !If
                    - CreateInfraResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 
                Effect: Allow
                Action:
                  - sts:AssumeRole
                  
  # API TESTS ROLE
  # This role is used by the CodeBuild project to perform
  # API testing via Newman.
  APITestsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${serviceName}-service-apitest-execution"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"    
      Policies:
        - PolicyName: 'api-tests-policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow Access to create logs
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              # Access Pipeline Artifact Bucket
              - Resource:
                  - !Sub "arn:aws:s3:::${referenceArtifactBucketName}/*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              # Access Newman Test Result bucket
              - Resource:
                  - !Sub "arn:aws:s3:::${referenceTestingResultsBucketName}/*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              # Access Newman Test Secret ID - Example
              - Resource:  
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${exampleNewmanTestSecretID}'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${exampleNewmanTestSecretID}-*'
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
              # Access the KMS key, if needed
              - Resource: !Ref "referenceKMSKeyArn"
                Effect: Allow
                Action:
                  - kms:*

  ## ===================================
  ## SUPPORT INFRA
  ## ===================================

  PipelineBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref referenceArtifactBucketName
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${referenceArtifactBucketName}"
              - !Sub "arn:aws:s3:::${referenceArtifactBucketName}/*"             
            Principal:
              AWS:
                # Local
                - !GetAtt "CodePipelineServiceRole.Arn"  

                # Source

                # Source Code
                - !Sub
                  - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-sourceaccess"
                  - { 
                      account: !Ref exampleAccountNumber,
                      env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                      service: !Ref serviceName  
                    }

                # CodeBuild
                # Example
                - !Sub
                  - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-codebuild"
                  - { 
                      account: !Ref exampleAccountNumber,
                      env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                      service: !Ref serviceName  
                    }

                - !Sub
                  - "arn:aws:iam::${account}:role/${env}-${service}-service-codebuild-execution"
                  - { 
                      account: !Ref exampleAccountNumber,
                      env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                      service: !Ref serviceName  
                    }                      

                # Infrastructure

                # Example
                - !If
                  - CreateInfraResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-inframgmt"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      } 
                  - !Ref "AWS::NoValue"

                - !If
                  - CreateInfraResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-infradeployment"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"

  TestingResultsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref referenceTestingResultsBucketName      
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${referenceTestingResultsBucketName}"
              - !Sub "arn:aws:s3:::${referenceTestingResultsBucketName}/*" 
            Principal:
              AWS:
                # Local
                - !GetAtt "CodePipelineServiceRole.Arn"  

                # Source

                # Source Code
                - !Sub
                  - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-sourceaccess"
                  - { 
                      account: !Ref exampleAccountNumber,
                      env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                      service: !Ref serviceName  
                    }

                # CodeBuild
                - !Sub
                  - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-codebuild"
                  - { 
                      account: !Ref exampleAccountNumber,
                      env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                      service: !Ref serviceName  
                    }

                # Infrastructure

                # Example
                - !If
                  - CreateInfraResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-inframgmt"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      } 
                  - !Ref "AWS::NoValue"

                - !If
                  - CreateInfraResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${service}-service-xa-infradeployment"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"

  # CloudWatch Event Rule for Pipeline Issues
  # Only created if alarm stack has been created and passed in
  PipelineIssuesEventRule: 
      Type: "AWS::Events::Rule"
      Condition: CreateAlarms
      Properties: 
        Description: "CloudWatch Event Rule to trigger on Activity Return pipeline failures."
        EventPattern: 
          resources:
          - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
          source:
          - aws.codepipeline
          detail-type:
          - CodePipeline Pipeline Execution State Change
          detail:
            state:
            - FAILED
        State: "ENABLED"
        Targets:
          - 
            Arn:
              Fn::ImportValue: 
                !Sub '${referenceAlertStack}-TopicARN'
            Id: 'PipelineIssueSNSTopic'
            InputTransformer:
              InputTemplate: "\"The Pipeline <pipeline> has failed. Go to https://console.aws.amazon.com/codepipeline/home?region=ap-southeast-2#/view/\""
              InputPathsMap:
                pipeline: "$.detail.pipeline"

  ## ===================================
  ## PIPELINE COMPONENTS
  ## ===================================

  # --------------------
  # SHARING SOURCE STAGES
  # --------------------
  # Because the source repositories are located in the Example/TEST account
  # We need to have an extra codebuild stage for each repository to expose the
  # artifacts to be accessible across accounts

  # CodeBuild Project - Infrastructure Sharing
  InfrastructureSharingBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref referenceKMSKeyArn       
      Source:
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              SLS_DEBUG: "*"
          phases:
            install:
              runtime-versions:
                nodejs: 10
            build:
              commands:
                - echo Sharing infra source to tools account
          artifacts:
            files: "**/*"
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:10.14.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPO_TYPE
            Value: Infrastructure
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: "example"
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: KMS_KEY
            Value: !Ref referenceKMSKeyArn           
      Name: !Sub "doc-${serviceName}-infra-sharing"      
      ServiceRole: !GetAtt "APITestsRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: 'Example'

  # CodeBuild Project - Dataservice Sharing
  DataServiceSharingBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref referenceKMSKeyArn       
      Source:
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              SLS_DEBUG: "*"
          phases:
            install:
              runtime-versions:
                nodejs: 10
            build:
              commands:
                - echo Sharing data service source to tools account
          artifacts:
            files: "**/*"
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:10.14.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPO_TYPE
            Value: DataService
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: "example"
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: KMS_KEY
            Value: !Ref referenceKMSKeyArn           
      Name: !Sub "doc-${serviceName}-data-service-sharing"      
      ServiceRole: !GetAtt "APITestsRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: 'Example'

  # CodeBuild Project - Client Sharing
  ClientSharingBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref referenceKMSKeyArn       
      Source:
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              SLS_DEBUG: "*"
          phases:
            install:
              runtime-versions:
                nodejs: 10
            build:
              commands:
                - echo Sharing client source to tools account
          artifacts:
            files: "**/*"
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:10.14.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPO_TYPE
            Value: Client
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: "example"
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: KMS_KEY
            Value: !Ref referenceKMSKeyArn           
      Name: !Sub "doc-${serviceName}-client-sharing"      
      ServiceRole: !GetAtt "APITestsRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: 'Example'

  # Repository details are passed in as parameters

  # --------------------
  # CLOUDFORMATION
  # --------------------

  # The Validation function ARN is passed in as a parameter


  # ========================================================
  # EXAMPLE ENVIRONMENT
  # ========================================================

  # --------------------
  # TESTING PROJECTS
  # --------------------

  # CodeBuild Project - Data service API Testing
  # This produces non-zipped file outputs to an S3 bucket
  DataServiceAPITestingExampleBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      EncryptionKey: !Ref referenceKMSKeyArn       
      Source:
        BuildSpec: "tst/newman/buildspec.yml"
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:10.14.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DEPLOYMENT_ENVIRONMENT
            Value: "example"
          - Name: SERVICE_NAME
            Value: !Ref serviceName            
          - Name: TEST_SECRET_ID
            Value: !Ref exampleNewmanTestSecretID
          - Name: TEST_CLIENT_ID
            Value: !Ref exampleNewmanTestClientID       
          - Name: TEST_REPORT_BUCKET
            Value: !Ref referenceTestingResultsBucketName           
          - Name: TEST_REPORT_KEY
            Value: !Sub 'results/${serviceName}/example/newman/results.html'
          - Name: KMS_KEY
            Value: !Ref referenceKMSKeyArn           
      Name: !Sub "doc-${serviceName}-api-testing-example"      
      ServiceRole: !GetAtt "APITestsRole.Arn"
      TimeoutInMinutes: 10
      # Tag Config
      Tags:              
      - Key: Environment
        Value: 'Example'

  ## ===================================
  ## MAIN CI/CD PIPELINE
  ## ===================================

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "doc-${serviceName}-cicd-pipeline"
      RoleArn: !GetAtt "CodePipelineServiceRole.Arn"
      ArtifactStores:
        - Region: 'ap-southeast-2'
          ArtifactStore:
            Type: S3
            Location: !Ref referenceArtifactBucketName        
            EncryptionKey:
              Id: !Ref referenceKMSKeyArn            
              Type: KMS
      Stages:

        # -- Source Stage
        - Name: SourceRepositories
          Actions:
            # CloudFormation Source Code (Infrastructure Resources etc.)
            - Name: "CloudFormationRepository"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                BranchName: !Ref "infraSourceRepoTriggerBranchName"
                RepositoryName: !Ref "referenceInfraSourceRepoName"
              OutputArtifacts:
                - Name: CloudFormationSource
              RunOrder: 1            
              RoleArn: 
                !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-sourceaccess"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"

            # Data Service Source Code (Serverless etc.)
            - Name: "DataServiceSourceRepository"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                BranchName: !Ref "serviceSourceRepoTriggerBranchName"
                RepositoryName: !Ref "referenceServiceSourceRepoName"
              OutputArtifacts:
                - Name: DataServiceSource
              RunOrder: 1
              RoleArn: 
                !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-sourceaccess"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"

            # Client Application Code etc.
            - !If 
              - "CreateClientAppResources"
              - Name: "ClientApplicationRepository"
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: 1
                  Provider: CodeCommit
                Configuration:
                  BranchName: !Ref "clientAppSourceRepoTriggerBranchName"
                  RepositoryName: !Ref "referenceClientAppSourceRepoName"
                OutputArtifacts:
                  - Name: ClientAppSource
                RunOrder: 1
                RoleArn: 
                  !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-sourceaccess"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"
              - !Ref "AWS::NoValue"

        # ===================================
        # Example INFRASTRUCTURE
        # ===================================

        # -- Validate CloudFormation Templates
        - !If
          - "CreateInfraResources"
          - Name: "ExampleValidateAndDeployCloudFormationTemplates"
            Actions:
              # CloudFormation Validation   
              - Name: "ExampleCloudFormationValidation"
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: 1
                  Provider: "Lambda"
                Configuration:
                  FunctionName: !Ref "referenceCFNValidationFunctionnName"
                  UserParameters: 
                    Fn::Sub:
                      - |
                        {
                        "artifact": "CloudFormationSource",
                        "template_path": "cfn/dpy/",
                        "results_key": "example/cloudformation.html",
                        "results_bucket": "${BucketName}"
                        }
                      - BucketName: !Ref referenceTestingResultsBucketName
                InputArtifacts:
                  - Name: CloudFormationSource
                RunOrder: 1

              - Name: "InfrastructureSharingBuildAction"
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Sub "doc-${serviceName}-infra-sharing"
                InputArtifacts:
                  - Name: CloudFormationSource
                OutputArtifacts:
                  - Name: SharedInfrastructureSource
                RunOrder: 5

              - Name: "DataServiceSharingBuildAction"
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Sub "doc-${serviceName}-data-service-sharing"
                InputArtifacts:
                  - Name: DataServiceSource
                OutputArtifacts:
                  - Name: SharedDataServiceSource
                RunOrder: 5

              # Client Application Code etc.
              - !If 
                - "CreateClientAppResources"
                - Name: "ClientSharingBuildAction"
                  ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Version: 1
                    Provider: CodeBuild
                  Configuration:
                    ProjectName: !Sub "doc-${serviceName}-client-sharing"
                  InputArtifacts:
                    - Name: ClientAppSource
                  OutputArtifacts:
                    - Name: SharedClientSource
                  RunOrder: 5
                - !Ref "AWS::NoValue"
                
              # -- Deploy Example CloudFormation Templates

              # These actions will always be customised.
              # The CloudFormation files and their
              # creation/update order will be peculiar to
              # the project in question         
              # Alerting
              - Name: "ExampleCreateChangeSetAlerting"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-alerting-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-alerting"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/alerting.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/alerting.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 10
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Documentation Bucket
              - Name: "ExampleCreateChangeSetDocumentation"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-documentation-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-documentation"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/pre/documentation.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/pre/documentation.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 10
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Public Zone
              - Name: "ExampleCreateChangeSetPublicZone"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-public-zone-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-public-zone"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/public-zone.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/public-zone.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 10
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Staging Resources
              - Name: "ExampleCreateChangeSetStagingResources"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-staging-resources-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-staging-resources"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/staging-resources.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/staging-resources.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 10
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

                # Alerting
              - Name: "ExampleManageAlerting"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-alerting-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-alerting"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"
                RunOrder: 20
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"

              # Documentation Bucket
              - Name: "ExampleManageDocumentation"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-documentation-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-documentation"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"
                RunOrder: 20
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"

              # Public Zone
              - Name: "ExampleManagePublicZone"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-public-zone-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-public-zone"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"
                RunOrder: 20
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"

              # Public Zone
              - Name: "ExampleManageStagingResources"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-staging-resources-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-staging-resources"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"
                RunOrder: 20
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName
                        }
                    - !Ref "AWS::NoValue"

              # Single-Page Application Infrastructure
              - Name: "ExampleCreateChangeSetSinglePageAppInfra"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-spa-client-infrastructure-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-spa-client-infrastructure"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/spa-client-s3-cloudfront.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/spa-client-s3-cloudfront.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 30
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Single Page Application
              - Name: "ExampleManageSinglePageAppInfra"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-spa-client-infrastructure-change-set"  
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-spa-client-infrastructure"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 40
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 
                    
              # Cognito
              - Name: "ExampleCreateChangeSetCognito"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-cognito-user-pool-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-cognito-user-pool"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/cognito-user-pool.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/cognito-user-pool.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 50
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Aurora Cluster
              - Name: "ExampleCreateChangeSetAuroraCluster"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CloudFormation
                InputArtifacts:
                  - Name: SharedInfrastructureSource                
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-aurora-datastore-change-set"              
                  ActionMode: CHANGE_SET_REPLACE
                  StackName: !Sub "example-${serviceName}-aurora-datastore"
                  Capabilities: CAPABILITY_NAMED_IAM
                  TemplateConfiguration: !Sub "SharedInfrastructureSource::cfn/dpy/aurora-rds.example.cfg.json"
                  TemplatePath: !Sub "SharedInfrastructureSource::cfn/dpy/aurora-rds.cf.yaml"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 50
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Cognito
              - Name: "ExampleManageCognito"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-cognito-user-pool-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-cognito-user-pool"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 60
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue" 

              # Aurora RDS
              - Name: "ExampleManageAuroraCluster"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                InputArtifacts:
                  - Name: SharedInfrastructureSource
                Configuration:
                  ChangeSetName: !Sub "example-${serviceName}-aurora-datastore-change-set"
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Sub "example-${serviceName}-aurora-datastore"
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"                
                RunOrder: 60
                RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub
                      - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                      - { 
                          account: !Ref exampleAccountNumber,
                          env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                          service: !Ref serviceName  
                        }
                    - !Ref "AWS::NoValue"

              # ===================================
              # Example ENVIRONMENT
              # ===================================

              # LAMBDA LAYERS
              # -----------------------------------

              # This is an optional build step to build any lambda layers
              # that must precede the deployment of the service. The condition
              # will be false if no build project has been passed in. As with
              # everything automated, this relies on strong naming conventions.
              - !If
                - "CreateLambdaLayerResources"        
                - Name: "ExamplePackageDataServiceLayers"
                  ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Version: 1
                    Provider: CodeBuild
                  Configuration:
                    ProjectName: !Sub "example-${serviceName}-service-layers-build" 
                  InputArtifacts:
                    - Name: SharedDataServiceSource
                  OutputArtifacts:
                    - Name: ExampleDataServiceLayers
                  RunOrder: 70
                  RoleArn: !If
                    - CreateCrossAccountResources
                    - !Sub "arn:aws:iam::${exampleAccountNumber}:role/example-${serviceName}-service-xa-codebuild"  
                    - !Ref "AWS::NoValue"
                - !Ref "AWS::NoValue"
                    
              - !If
                - "CreateLambdaLayerResources"        
                # Layer Change Set
                - Name: "ExampleCreateChangeSetDataServiceLayers"
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Version: 1
                    Provider: CloudFormation
                  InputArtifacts:
                    - Name: ExampleDataServiceLayers        
                  Configuration:
                    ChangeSetName: !Sub "example-${serviceName}-layers-change-set"              
                    ActionMode: CHANGE_SET_REPLACE
                    StackName: !Sub "example-${serviceName}-layers"
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplateConfiguration: !Sub "ExampleDataServiceLayers::birdbanding-layers.example.cfg.json"
                    TemplatePath: !Sub "ExampleDataServiceLayers::birdbanding-layers.cf.yaml"
                    RoleArn: !If
                      - CreateCrossAccountResources
                      - !Sub
                        - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                        - { 
                            account: !Ref exampleAccountNumber,
                            env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                            service: !Ref serviceName  
                          }
                      - !Ref "AWS::NoValue"                
                  RunOrder: 71
                  RoleArn: !If
                      - CreateCrossAccountResources
                      - !Sub
                        - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                        - { 
                            account: !Ref exampleAccountNumber,
                            env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                            service: !Ref serviceName  
                          }
                      - !Ref "AWS::NoValue"
                - !Ref "AWS::NoValue"

              - !If
                - "CreateLambdaLayerResources"        
                # Layer Management           
                - Name: "ExampleManageDataServiceLayers"
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: 1
                  InputArtifacts:
                    - Name: ExampleDataServiceLayers
                  Configuration:
                    ChangeSetName: !Sub "example-${serviceName}-layers-change-set"
                    ActionMode: CHANGE_SET_EXECUTE
                    StackName: !Sub "example-${serviceName}-layers"
                    RoleArn: !If
                      - CreateCrossAccountResources
                      - !Sub
                        - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                        - { 
                            account: !Ref exampleAccountNumber,
                            env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                            service: !Ref serviceName
                          }
                      - !Ref "AWS::NoValue"
                  RunOrder: 72
                  RoleArn: !If
                      - CreateCrossAccountResources
                      - !Sub
                        - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                        - { 
                            account: !Ref exampleAccountNumber,
                            env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                            service: !Ref serviceName
                          }
                      - !Ref "AWS::NoValue"
                - !Ref "AWS::NoValue"
                    
          - !Ref "AWS::NoValue"

        # LAMBDA DATALAKE INTEGRATION
        # -----------------------------------

        # This is an optional build step to build any datalake
        # integrations that must precede the deployment of the service. 
        # The condition will be false if no build project has been passed in. 
        # As with everything automated, this relies on STRONG NAMING CONVENTIONS.
        - !If
          - "CreateDataLakeIntegrationResources"        
          - Name: "ExampleOrchestrateDatalakeIntegration"
            Actions:
            # Package the integration functions
            - Name: "PackageDataServiceDataLakeIntegration"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "example-${serviceName}-service-datalake-integration-build" 
              InputArtifacts:
                - Name: SharedDataServiceSource
              OutputArtifacts:
                - Name: DataServiceDataLakeIntegration
              RunOrder: 10
              RoleArn: !If
                - CreateCrossAccountResources
                - !Sub "arn:aws:iam::${exampleAccountNumber}:role/example-${serviceName}-service-xa-codebuild"  
                - !Ref "AWS::NoValue"
            # Create Change Set
            - Name: "ExampleCreateChangeSetDataServiceDataLakeIntegration"
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: DataServiceDataLakeIntegration        
              Configuration:
                ChangeSetName: !Sub "example-${serviceName}-datalake-integration-change-set"              
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub "example-${serviceName}-datalake-integration"
                Capabilities: CAPABILITY_NAMED_IAM
                TemplateConfiguration: !Sub "DataServiceDataLakeIntegration::parameters.cfg.json"
                TemplatePath: !Sub "DataServiceDataLakeIntegration::template.cf.yaml"
                RoleArn: !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"                
              RunOrder: 20
              RoleArn: !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName  
                      }
                  - !Ref "AWS::NoValue"
            # Execute Change Set    
            - Name: "ExampleManageDataServiceDataLakeIntegration"
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: DataServiceDataLakeIntegration
              Configuration:
                ChangeSetName: !Sub "example-${serviceName}-datalake-integration-change-set"
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub "example-${serviceName}-datalake-integration"
                RoleArn: !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-infradeployment"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName
                      }
                  - !Ref "AWS::NoValue"
              RunOrder: 30
              RoleArn: !If
                  - CreateCrossAccountResources
                  - !Sub
                    - "arn:aws:iam::${account}:role/${env}-${serviceName}-service-xa-inframgmt"
                    - { 
                        account: !Ref exampleAccountNumber,
                        env: !FindInMap [ EnvConfig, 'Example', EnvToLower ],
                        service: !Ref serviceName
                      }
                  - !Ref "AWS::NoValue"
            # Upload the Configuration
            - Name: "ExampleUploadDataLakeIntegrationConfig"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "example-${serviceName}-service-datalake-integration-config-build" 
              InputArtifacts:
                - Name: SharedDataServiceSource
              OutputArtifacts:
                - Name: DataServiceDataLakeIntegrationConfig
              RunOrder: 40
              RoleArn: !If
                - CreateCrossAccountResources
                - !Sub "arn:aws:iam::${exampleAccountNumber}:role/example-${serviceName}-service-xa-codebuild"  
                - !Ref "AWS::NoValue"                  
          - !Ref "AWS::NoValue"

        # LAMBDA DATALAKE INTEGRATION
        # -----------------------------------

        # -- Build Stage
        - Name: "ExampleBuildDeployAndTest"
          Actions:
            # Serverless API
            - Name: "ExampleDataServiceDeploy"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "example-${serviceName}-service-build" 
              InputArtifacts:
                - Name: SharedDataServiceSource
              OutputArtifacts:
                - Name: DataServiceExampleDeployment
              RunOrder: 1
              RoleArn: !If
                - CreateCrossAccountResources
                - !Sub "arn:aws:iam::${exampleAccountNumber}:role/example-${serviceName}-service-xa-codebuild"  
                - !Ref "AWS::NoValue"

            # -- Test Actions
            # Newman
            - Name: "ExampleNewmanAPITests"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref "DataServiceAPITestingExampleBuild"
              InputArtifacts:
                - Name: SharedDataServiceSource
              OutputArtifacts:
                - Name: APIExampleTestResults
              RunOrder: 2

                        # Client Application Build
            - !If 
              - CreateClientAppResources                      
              - Name: "ExampleClientAppDeploy"
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Sub "example-${serviceName}-client-app-build"                    
                InputArtifacts:
                  - Name: SharedClientSource
                OutputArtifacts:
                  - Name: ClientAppExampleDeployment
                RunOrder: 1
                RoleArn: !If
                - CreateCrossAccountResources
                - !Sub "arn:aws:iam::${exampleAccountNumber}:role/example-${serviceName}-service-xa-codebuild"  
                - !Ref "AWS::NoValue"
              - !Ref AWS::NoValue



        # -- Approval Stage
        - Name: ApproveForTest
          Actions:
          - Name: Approval
            InputArtifacts: []
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: '1'
              Provider: Manual
            OutputArtifacts: []
            Configuration:
              NotificationArn: !Ref DeployToTestTopic
              ExternalEntityLink: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}
              CustomData: !Sub "Newman Test Results : https://console.aws.amazon.com/s3/home?&bucket=${referenceTestingResultsBucketName}&prefix=test-results"
            RunOrder: 1


## ::PARAMETERS::
Outputs:

  TemplateID:
    Description: 'Template id'
    Value: 'cicd/service-pipeline'
  
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
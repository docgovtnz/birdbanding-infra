---
## This template creates service-specific lambda functions for datalake integration

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "DOC Data Service Template - Datalake integration functions"

## ::METADATA::
Metadata:
  'AWS::CloudFormation::Interface':
    
    ParameterGroups:
    #---------------  
      - Label: 
          default: "General Configuration"
        Parameters:
          - environment
          - serviceName
      - Label:
          default: "Cross References"
        Parameters:
          - referenceDatalakeStructureStackName     
          - referenceCommonLayerArn
          - referenceInternalLayerArn    
      - Label:
          default: "VPC Configuration"
        Parameters:
          - referenceSecurityGroupIds
          - referenceSubnetIds
      - Label:
          default: "Datastore Configuration"
        Parameters:
          - datastoreEndpoint
          - datastoreReadOnlyEndpoint
          - datastoreDBName
          - datastorePort

    ParameterLabels:
    #---------------  

      # General Configuration

      environment:
        default: "Environment:"
      serviceName:
        default: "Data Service name:"

## ::PARAMETERS::
Parameters:

  # General Configuration

  environment:
    Type: String
    AllowedValues:
    - "Example"
    Default: "Example"

  serviceName:
    Type: String
    ConstraintDescription: "Must be between 3 - 32 characters long."
    AllowedPattern: "^[A-Za-z0-9]{3,32}$"
    MinLength: 4
    MaxLength: 32
    Default: "unknowndataservice"

## ::CONDITIONS::

# <None>

## ::MAPPINGS::
Mappings:

# Environment-Specific Config
  EnvConfig:
    Example:
      EnvToLower: 'example'
      AccountPrefix: 'exampleprefix'

## ::RESOURCES::
Resources:

  # ------------------
  # IAM Roles
  # ------------------

  # USER POOL LAMBDA EXECUTION ROLE
  UserPoolLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*UserPoolClient
                  - cognito-idp:*IdentityProvider
                  - cognito-idp:*UserPoolDomain
                  - cognito-idp:List*
                  - cognito-idp:Describe*
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudfront:*Distribution
                Resource: "*"                
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # IDENTITY POOL LAMBDA EXECUTION ROLE
  IdentityPoolLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # TODO - Add more permissions as we build up Lambdas              
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # ------------------
  # Lambda Functions
  # ------------------

  # User Pool
  # Custom Resources

  # Note: Lambda Function Tag Definition is
  # Handled differently between SAM and regular
  # CFN files. This file expects tags as a
  # set of sub-properties, ie.
  # <Name>: '<Value>'

  # Enables Cloudformation management of Cognito
  # User Pool Clients.
  ManageCognitoUserPoolClient:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cfn-custom-manage-cognito-user-pool.client_handler
      Runtime: python3.7
      CodeUri: ./cfn-custom-manage-cognito-user-pool.py
      Description: "Performs CloudFormation Create/Update/Delete actions on a Cognito User Pool Client. To be used as a custom resource."
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt 'UserPoolLambdaExecutionRole.Arn'  
      Tags:
        Name: !Sub '${environment}-${serviceName}-cfn-custom-manage-user-pool-client'
        Environment: !Ref 'environment'

  # Enables Cloudformation management of Cognito
  # User Pool Identity Providers.
  ManageCognitoUserPoolIdp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cfn-custom-manage-cognito-user-pool.identity_provider_handler
      Runtime: python3.7
      CodeUri: ./cfn-custom-manage-cognito-user-pool.py
      Description: "Performs CloudFormation Create/Update/Delete actions on a Cognito User Pool Identity Provider. To be used as a custom resource."
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt 'UserPoolLambdaExecutionRole.Arn'  
      Tags:
        Name: !Sub '${environment}-${serviceName}-cfn-custom-manage-user-pool-idp'
        Environment: !Ref 'environment'

  # Enables Cloudformation management of Cognito
  # User Pool Domain.
  ManageCognitoUserPoolDomain:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cfn-custom-manage-cognito-user-pool.domain_handler
      Runtime: python3.7
      CodeUri: ./cfn-custom-manage-cognito-user-pool.py
      Description: "Performs CloudFormation Create/Update/Delete actions on a Cognito User Pool Domain. To be used as a custom resource."
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt 'UserPoolLambdaExecutionRole.Arn'  
      Tags:
        Name: !Sub '${environment}-${serviceName}-cfn-custom-manage-user-pool-domain'
        Environment: !Ref 'environment'

  # Identity Pool
  # Custom Resources
  TransformIdentityPoolRoleMappings:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cfn-custom-manage-cognito-identity-pool.role_mapping_handler
      Runtime: python3.7
      CodeUri: ./cfn-custom-manage-cognito-identity-pool.py
      Description: "Performs Role Mappings transformation to get around CFN limitations."
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt 'IdentityPoolLambdaExecutionRole.Arn'
      Tags:
        Name: !Sub '${environment}-${serviceName}-cfn-custom-identity-pool-mapping-transform'
        Environment: !Ref 'environment'

  # SSM PARAMETERS

  # Manage Cognito User Pool Client ARN
  ManageCognitoUserPoolClientArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the Lambda function to manage Cognito User Pool Clients"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-client-function/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'ManageCognitoUserPoolClient.Arn'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Cognito User Pool Client Name
  ManageCognitoUserPoolClientName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the Lambda function to manage Cognito User Pool Clients"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-client-function/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref 'ManageCognitoUserPoolClient'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Cognito User Pool Client Identity Provider
  ManageCognitoUserPoolIdpArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the Lambda function to manage Cognito User Pool Identity Providers"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-idp-function/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'ManageCognitoUserPoolIdp.Arn'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Cognito User Pool Identity Provider Name
  ManageCognitoUserPoolIdpName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the Lambda function to manage Cognito User Pool Identity Provider"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-idp-function/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref 'ManageCognitoUserPoolIdp'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Cognito User Pool Domain
  ManageCognitoUserPoolDomainArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the Lambda function to manage Cognito User Pool Domain"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-domain-function/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'ManageCognitoUserPoolDomain.Arn'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Cognito User Pool Domain Name
  ManageCognitoUserPoolDomainName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the Lambda function to manage Cognito User Pool Domain"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-user-pool-domain-function/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref 'ManageCognitoUserPoolDomain'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Transform Identity Pool Role Mappings ARN
  TransformIdentityPoolRoleMappingsArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "ARN of the Lambda function to transform Identity Pool Role Mappings"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-identity-pool-rolemappings-function/arn'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !GetAtt 'TransformIdentityPoolRoleMappings.Arn'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

  # Manage Identity Pool Role Mappings Name
  TransformIdentityPoolRoleMappingsName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Name of the Lambda function to transform Identity Pool Role Mappings"
      Name: !Sub
        - '/${env}/${service}/lambda/manage-cognito-identity-pool-rolemappings-function/name'
        - {
          env: !FindInMap [ EnvConfig, !Ref environment, EnvToLower ],
          service: !Ref serviceName
          }
      Type: 'String'
      Value: !Ref 'TransformIdentityPoolRoleMappings'
      # Tag Config
      Tags:        
        Service: !Sub '${serviceName}'
        Environment: Example

## ::OUTPUTS::
Outputs:

  TemplateID:
    Description: 'Template ID'
    Value: 'service/cfn_custom'

  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  # Custom Resources

  # User Pool CLient
  ManageCognitoUserPoolClientArn:
    Description: "The ARN of the cognito user pool client management Lambda function"
    Value: !GetAtt 'ManageCognitoUserPoolClient.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolClient-Arn'

  ManageCognitoUserPoolClientName:
    Description: "The name of the cognito user pool client management Lambda function"
    Value: !Ref 'ManageCognitoUserPoolClient'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolClient-Name'

  # User Pool identity Provider
  ManageCognitoUserPoolIdpArn:
    Description: "The ARN of the cognito user pool identity provider management Lambda function"
    Value: !GetAtt 'ManageCognitoUserPoolIdp.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolIdp-Arn'

  ManageCognitoUserPoolIdpName:
    Description: "The name of the cognito user pool identity provider management Lambda function"
    Value: !Ref 'ManageCognitoUserPoolIdp'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolIdp-Name'      

  # User Pool Domain
  ManageCognitoUserPoolDomainArn:
    Description: "The ARN of the cognito user pool domain management Lambda function"
    Value: !GetAtt 'ManageCognitoUserPoolDomain.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolDomain-Arn'

  ManageCognitoUserPoolDomainName:
    Description: "The name of the cognito user pool domain management Lambda function"
    Value: !Ref 'ManageCognitoUserPoolDomain'
    Export:
      Name: !Sub '${AWS::StackName}-ManageCognitoUserPoolDomain-Name'          

  # Identity Pool Role Mappings
  TransformIdentityPoolRoleMappingsArn:
    Description: "The ARN of the cognito identity pool role mapping transformation Lambda function"
    Value: !GetAtt 'TransformIdentityPoolRoleMappings.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-TransformIdentityPoolRoleMappings-Arn'

  TransformIdentityPoolRoleMappingsName:
    Description: "The name of the cognito identity pool role mapping transformation Lambda function"
    Value: !Ref 'TransformIdentityPoolRoleMappings'
    Export:
      Name: !Sub '${AWS::StackName}-TransformIdentityPoolRoleMappings-Name'       
